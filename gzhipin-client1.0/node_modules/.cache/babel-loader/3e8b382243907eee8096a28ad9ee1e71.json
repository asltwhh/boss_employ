{"ast":null,"code":"import \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\chat\\\\chat.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { sendMsg } from \"../../redux/actions\";\nconst Item = _List.Item;\n\nclass Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      content: \"\"\n    };\n\n    this.handleSend = () => {\n      // 收集数据\n      const from = this.props.user._id;\n      const to = this.props.match.params.userid;\n      const content = this.state.content.trim(); // 发送请求(发消息)\n\n      if (content) {\n        // 异步操作\n        this.props.sendMsg({\n          from,\n          to,\n          content\n        });\n      } // 清除输入数据\n\n\n      this.setState({\n        content: \"\"\n      });\n    };\n  }\n\n  render() {\n    // debugger;\n    // console.log(\"我又render了一次.....\");\n    const {\n      user,\n      chat\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = chat; //当前chatMsgs中包含我和所有其他用户的聊天信息，我现在只需要显示我和某个特定用户的聊天信息\n    // 所以需要过滤\n    // 先得到当前的chat_id\n\n    const meId = user._id; // 刚开始users中是没有数据的，是一个空对象，需要发送异步请求获取消息列表的同时\n    // 获取到users\n\n    if (!users[meId]) {\n      console.log(\"我渲染了，但是我还没有得到redux中的状态值\");\n      return null;\n    } // debugger;\n\n\n    const targetId = this.props.match.params.userid;\n    const chat_id = [meId, targetId].sort().join(\"_\");\n    const msgs = chatMsgs.filter(msg => msg.chat_id === chat_id); // msgs中的消息有两种情况：我发的，对方发的\n\n    console.log(targetId); // 获取目标用户的头像\n\n    const targetHeader = users[targetId].header; // 有一个问题，对方可能还没有完善信息，并不具备icon\n\n    const targetIcon = targetHeader ? require(`../../assets/images/${targetHeader}.png`) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, users[targetId].username), /*#__PURE__*/React.createElement(_List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, msgs.map(msg => {\n      if (msg.to === meId) {\n        // 对方发给我的\n        return /*#__PURE__*/React.createElement(Item, {\n          key: msg._id,\n          thumb: targetIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }\n        }, msg.content), {\n          /* 没有必要在map中获取头像，因为目标用户的头像是确定的，所以直接在外层获取一次就可以了\r\n          <Item key={msg._id} thumb={require(`../../assets/images/${header}.png`)}>msg.content</Item> */\n        };\n      } else {\n        //我发给对方的\n        return /*#__PURE__*/React.createElement(Item, {\n          key: msg._id,\n          extra: \"\\u6211\",\n          className: \"chat-me\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }\n        }, msg.content);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"am-tab-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(_InputItem, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\",\n      extra: /*#__PURE__*/React.createElement(\"span\", {\n        onClick: this.handleSend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 20\n        }\n      }, \"\\u53D1\\u9001\"),\n      value: this.state.content,\n      onChange: val => this.setState({\n        content: val\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {\n  sendMsg\n})(Chat);","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/chat/chat.jsx"],"names":["React","connect","sendMsg","Item","Chat","Component","state","content","handleSend","from","props","user","_id","to","match","params","userid","trim","setState","render","chat","users","chatMsgs","meId","console","log","targetId","chat_id","sort","join","msgs","filter","msg","targetHeader","header","targetIcon","require","username","map","val"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavBar, List, InputItem } from \"antd-mobile\";\r\nimport { sendMsg } from \"../../redux/actions\";\r\n\r\nconst Item = List.Item;\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    content: \"\",\r\n  };\r\n  handleSend = () => {\r\n    // 收集数据\r\n    const from = this.props.user._id;\r\n    const to = this.props.match.params.userid;\r\n    const content = this.state.content.trim();\r\n    // 发送请求(发消息)\r\n    if (content) {\r\n      // 异步操作\r\n      this.props.sendMsg({ from, to, content });\r\n    }\r\n    // 清除输入数据\r\n    this.setState({ content: \"\" });\r\n  };\r\n  render() {\r\n    // debugger;\r\n    // console.log(\"我又render了一次.....\");\r\n    const { user, chat } = this.props;\r\n    const { users, chatMsgs } = chat;\r\n    //当前chatMsgs中包含我和所有其他用户的聊天信息，我现在只需要显示我和某个特定用户的聊天信息\r\n    // 所以需要过滤\r\n    // 先得到当前的chat_id\r\n    const meId = user._id;\r\n\r\n    // 刚开始users中是没有数据的，是一个空对象，需要发送异步请求获取消息列表的同时\r\n    // 获取到users\r\n    if (!users[meId]) {\r\n      console.log(\"我渲染了，但是我还没有得到redux中的状态值\");\r\n      return null;\r\n    }\r\n\r\n    // debugger;\r\n    const targetId = this.props.match.params.userid;\r\n    const chat_id = [meId, targetId].sort().join(\"_\");\r\n\r\n    const msgs = chatMsgs.filter((msg) => msg.chat_id === chat_id);\r\n    // msgs中的消息有两种情况：我发的，对方发的\r\n\r\n    console.log(targetId);\r\n    // 获取目标用户的头像\r\n    const targetHeader = users[targetId].header;\r\n    // 有一个问题，对方可能还没有完善信息，并不具备icon\r\n    const targetIcon = targetHeader\r\n      ? require(`../../assets/images/${targetHeader}.png`)\r\n      : null;\r\n\r\n    return (\r\n      <div id=\"chat-page\">\r\n        <NavBar>{users[targetId].username}</NavBar>\r\n        <List>\r\n          {msgs.map((msg) => {\r\n            if (msg.to === meId) {\r\n              // 对方发给我的\r\n              return (\r\n                (\r\n                  <Item key={msg._id} thumb={targetIcon}>\r\n                    {msg.content}\r\n                  </Item>\r\n                ),\r\n                {\r\n                  /* 没有必要在map中获取头像，因为目标用户的头像是确定的，所以直接在外层获取一次就可以了\r\n                  <Item key={msg._id} thumb={require(`../../assets/images/${header}.png`)}>msg.content</Item> */\r\n                }\r\n              );\r\n            } else {\r\n              //我发给对方的\r\n              return (\r\n                <Item key={msg._id} extra=\"我\" className=\"chat-me\">\r\n                  {msg.content}\r\n                </Item>\r\n              );\r\n            }\r\n          })}\r\n        </List>\r\n        <div className=\"am-tab-bar\">\r\n          <InputItem\r\n            placeholder=\"请输入\"\r\n            extra={<span onClick={this.handleSend}>发送</span>}\r\n            value={this.state.content}\r\n            onChange={(val) => this.setState({ content: val })}\r\n          ></InputItem>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({ user: state.user, chat: state.chat }), {\r\n  sendMsg,\r\n})(Chat);\r\n"]},"metadata":{},"sourceType":"module"}