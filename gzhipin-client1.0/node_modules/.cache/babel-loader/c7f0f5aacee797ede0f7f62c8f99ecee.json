{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList, reqReadMsg } from \"../api\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_Msg_LIST, RECEIVE_Msg } from \"./action-types\";\nimport io from \"socket.io-client\";\n/* \r\n单例对象：整个内存中仅有一个socket\r\n   1 创建对象之前：判断对象是否已经创建，只有当不存在时才创建\r\n   2 创建对象之后：保存socket对象在io对象中\r\n*/\n// 接收到一个消息的同步action\n\nconst receiveMsg = (chatMsg, userid) => ({\n  type: RECEIVE_Msg,\n  data: {\n    chatMsg,\n    userid\n  }\n});\n\nfunction initIO(userid, dispatch) {\n  if (!io.socket) {\n    // 连接服务器,得到与服务器的连接对象 ws是协议，类似于http\n    io.socket = io(\"ws://localhost:4000\"); // 接收来自服务器端的消息\n\n    io.socket.on(\"receiveMsg\", function (chatMsg) {\n      console.log(\"接收来自服务器端的消息：\", chatMsg); // 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\n\n      if (userid === chatMsg.from || userid === chatMsg.to) {\n        dispatch(receiveMsg(chatMsg, userid));\n      }\n    });\n  }\n} // 异步获取消息列表数据\n\n\nasync function getMsgList(userid, dispatch) {\n  initIO(userid, dispatch);\n  const response = await reqChatMsgList();\n  const result = response.data;\n\n  if (result.code === 0) {\n    const {\n      users,\n      chatMsgs\n    } = result.data; // 分发同步action\n\n    dispatch(receiveMsgList({\n      users,\n      chatMsgs,\n      userid\n    }));\n  }\n} // 发送消息的异步action\n\n\nexport const sendMsg = ({\n  from,\n  to,\n  content\n}) => {\n  return dispatch => {\n    console.log(\"客户端向服务器发送消息\", {\n      from,\n      to,\n      content\n    }); // 发送消息用的是socket.io\n    // 发消息\n\n    io.socket.emit(\"sendMsg\", {\n      from,\n      to,\n      content\n    });\n  };\n}; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户信息的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重置用户信息的同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 接收消息列表的同步action\n\nconst receiveMsgList = ({\n  users,\n  chatMsgs,\n  userid\n}) => ({\n  type: RECEIVE_Msg_LIST,\n  data: {\n    users,\n    chatMsgs,\n    userid\n  }\n}); // 获取用户列表的同步action\n\n\nconst receiveUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n}); // 注册异步action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (password !== password2) {\n    return errorMsg(\"两次输入密码不一致\");\n  } //表单数据合法，返回一个发ajax请求的异步action函数\n\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 获取当前用户的id\n      const userid = result.data._id;\n      getMsgList(userid, dispatch); // 成功,分发授权成功的同步action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (!password) {\n    return errorMsg(\"密码不能为空\");\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 获取当前用户的id\n      const userid = result.data._id;\n      getMsgList(userid, dispatch); // 成功,分发授权成功的同步action\n\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 异步更新数据\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    console.log(response);\n    const result = response.data; // result：{code:0,data} {code:1,msg}\n\n    if (result.code === 0) {\n      // 分发同步action\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\n      dispatch(receiveUser(result.data));\n    } else {\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户异步action\n\nexport const getUser = () => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 获取当前用户的id\n      const userid = result.data._id;\n      getMsgList(userid, dispatch);\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户列表的异步action\n\nexport const getUserList = type => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUserList(type);\n    const result = response.data; // 分发一个同步action\n\n    if (result.code === 0) {\n      dispatch(receiveUserList(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","reqChatMsgList","reqReadMsg","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_Msg_LIST","RECEIVE_Msg","io","receiveMsg","chatMsg","userid","type","data","initIO","dispatch","socket","on","console","log","from","to","getMsgList","response","result","code","users","chatMsgs","receiveMsgList","sendMsg","content","emit","authSuccess","user","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","register","username","password","password2","_id","login","updateUser","getUser","getUserList"],"mappings":"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","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport {\r\n  reqRegister,\r\n  reqLogin,\r\n  reqUpdateUser,\r\n  reqUser,\r\n  reqUserList,\r\n  reqChatMsgList,\r\n  reqReadMsg,\r\n} from \"../api\";\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USER_LIST,\r\n  RECEIVE_Msg_LIST,\r\n  RECEIVE_Msg,\r\n} from \"./action-types\";\r\n\r\nimport io from \"socket.io-client\";\r\n\r\n/* \r\n单例对象：整个内存中仅有一个socket\r\n   1 创建对象之前：判断对象是否已经创建，只有当不存在时才创建\r\n   2 创建对象之后：保存socket对象在io对象中\r\n*/\r\n// 接收到一个消息的同步action\r\nconst receiveMsg = (chatMsg, userid) => ({\r\n  type: RECEIVE_Msg,\r\n  data: { chatMsg, userid },\r\n});\r\n\r\nfunction initIO(userid, dispatch) {\r\n  if (!io.socket) {\r\n    // 连接服务器,得到与服务器的连接对象 ws是协议，类似于http\r\n    io.socket = io(\"ws://localhost:4000\");\r\n\r\n    // 接收来自服务器端的消息\r\n    io.socket.on(\"receiveMsg\", function (chatMsg) {\r\n      console.log(\"接收来自服务器端的消息：\", chatMsg);\r\n      // 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\r\n      if (userid === chatMsg.from || userid === chatMsg.to) {\r\n        dispatch(receiveMsg(chatMsg, userid));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// 异步获取消息列表数据\r\nasync function getMsgList(userid, dispatch) {\r\n  initIO(userid, dispatch);\r\n  const response = await reqChatMsgList();\r\n  const result = response.data;\r\n  if (result.code === 0) {\r\n    const { users, chatMsgs } = result.data;\r\n    // 分发同步action\r\n    dispatch(receiveMsgList({ users, chatMsgs, userid }));\r\n  }\r\n}\r\n\r\n// 发送消息的异步action\r\nexport const sendMsg = ({ from, to, content }) => {\r\n  return (dispatch) => {\r\n    console.log(\"客户端向服务器发送消息\", { from, to, content });\r\n    // 发送消息用的是socket.io\r\n    // 发消息\r\n    io.socket.emit(\"sendMsg\", { from, to, content });\r\n  };\r\n};\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\r\n// 接收用户信息的同步action\r\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\r\n// 重置用户信息的同步action\r\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\r\n// 接收消息列表的同步action\r\nconst receiveMsgList = ({ users, chatMsgs, userid }) => ({\r\n  type: RECEIVE_Msg_LIST,\r\n  data: { users, chatMsgs, userid },\r\n});\r\n\r\n// 获取用户列表的同步action\r\nconst receiveUserList = (userList) => ({\r\n  type: RECEIVE_USER_LIST,\r\n  data: userList,\r\n});\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n  const { username, password, password2, type } = user;\r\n\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (password !== password2) {\r\n    return errorMsg(\"两次输入密码不一致\");\r\n  }\r\n\r\n  //表单数据合法，返回一个发ajax请求的异步action函数\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqRegister({ username, password, type });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 获取当前用户的id\r\n      const userid = result.data._id;\r\n      getMsgList(userid, dispatch);\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n  const { username, password } = user;\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (!password) {\r\n    return errorMsg(\"密码不能为空\");\r\n  }\r\n\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqLogin({ username, password });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 获取当前用户的id\r\n      const userid = result.data._id;\r\n      getMsgList(userid, dispatch);\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 异步更新数据\r\nexport const updateUser = (user) => {\r\n  return async (dispatch) => {\r\n    const response = await reqUpdateUser(user);\r\n    console.log(response);\r\n    const result = response.data; // result：{code:0,data} {code:1,msg}\r\n    if (result.code === 0) {\r\n      // 分发同步action\r\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户异步action\r\nexport const getUser = () => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUser();\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 获取当前用户的id\r\n      const userid = result.data._id;\r\n      getMsgList(userid, dispatch);\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户列表的异步action\r\nexport const getUserList = (type) => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUserList(type);\r\n    const result = response.data;\r\n    // 分发一个同步action\r\n    if (result.code === 0) {\r\n      dispatch(receiveUserList(result.data));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}