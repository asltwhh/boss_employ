{"ast":null,"code":"var _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\main\\\\main.jsx\";\n\n/* \r\n    主路由组件\r\n*/\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\n\nimport LaobanInfo from \"../laoban-info/laoban-info\";\nimport DashenInfo from \"../dashen-info/dashen-info\";\nimport { getRedirectTo } from \"../../utils\";\n\nclass Main extends React.Component {\n  componentDidMount() {\n    /* 实现异步过程 */\n    // 登陆过，但是关掉了该窗口(cookies中有userid)，\n    // 之后再打开没有再次登录(redux管理的user中没有_id)\n    const userid = Cookies.get(\"userid\");\n    const {\n      _id\n    } = this.props.user;\n\n    if (userid && _id) {\n      // 发送异步请求，获取user信息\n      // 需要在后台先写请求响应，然后在前台写发送ajax请求的函数、redux等，最后在可以在这里使用\n      console.log(\"发送ajax请求获取user\");\n    }\n  }\n\n  render() {\n    // 读取cookies中的userid\n    const userid = Cookies.get(\"userid\");\n\n    if (!userid) {\n      // 如果没有，则自动重定向到登录界面\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 14\n        }\n      });\n    } // 如果有，读取redux中的user状态\n\n\n    const {\n      user\n    } = this.props;\n\n    if (!user._id) {\n      // 如果user没有_id,则返回一个null,不做任何显示\n      return null;\n    } else {\n      // 如果有_id,则显示对应的界面，比如大神界面，老板界面，个人中心界面等\n      // 如果请求的是根路径，就需要根据user的header和type计算得到一个重定向的路径，并且自动重定向\n      // 获取请求的路径\n      let path = this.props.location.pathname;\n\n      if (path === \"/\") {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 16\n          }\n        });\n      }\n    } // 根据user的header和type计算得到一个重定向的路径，并且自动重定向\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/laobaninfo\",\n      component: LaobanInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/dasheninfo\",\n      component: DashenInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), {})(Main);\n/* \r\n1 实现自动登陆：\r\n    情况1： 登陆过，但是关掉了该窗口(cookies中有userid)，之后再打开没有再次登录(redux管理的user中没有_id)，\r\n        发送请求获取对应的用户信息\r\n    情况2： cookies中没有userid 自动进入login界面\r\n    情况3： 判断redux管理的user中是否有_id:\r\n        没有暂时不做任何显示\r\n\r\n2 如果已经登陆了：\r\n    如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n*/","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/main/main.jsx"],"names":["React","Switch","Route","Redirect","connect","Cookies","LaobanInfo","DashenInfo","getRedirectTo","Main","Component","componentDidMount","userid","get","_id","props","user","console","log","render","path","location","pathname","type","header","state"],"mappings":";;AAAA;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAAiC;;AAEjC,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAmC;AACjCC,EAAAA,iBAAiB,GAAG;AAClB;AAEA;AACA;AACA,UAAMC,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,QAAZ,CAAf;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAU,KAAKC,KAAL,CAAWC,IAA3B;;AACA,QAAIJ,MAAM,IAAIE,GAAd,EAAmB;AACjB;AACA;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMP,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,QAAZ,CAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACX;AACA,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KANM,CAOP;;;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAW,KAAKD,KAAtB;;AACA,QAAI,CAACC,IAAI,CAACF,GAAV,EAAe;AACb;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL;AACA;AAEA;AACA,UAAIM,IAAI,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,QAA/B;;AACA,UAAIF,IAAI,KAAK,GAAb,EAAkB;AAChBA,QAAAA,IAAI,GAAGZ,aAAa,CAACQ,IAAI,CAACO,IAAN,EAAYP,IAAI,CAACQ,MAAjB,CAApB;AACA,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAEJ,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAtBM,CAwBP;;;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEd,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEC,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAQD;;AAhDgC;;AAmDnC,eAAeH,OAAO,CAAEqB,KAAD,KAAY;AAAET,EAAAA,IAAI,EAAES,KAAK,CAACT;AAAd,CAAZ,CAAD,EAAoC,EAApC,CAAP,CAA+CP,IAA/C,CAAf;AAEA","sourcesContent":["/* \r\n    主路由组件\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\r\n\r\nimport LaobanInfo from \"../laoban-info/laoban-info\";\r\nimport DashenInfo from \"../dashen-info/dashen-info\";\r\nimport { getRedirectTo } from \"../../utils\";\r\n\r\nclass Main extends React.Component {\r\n  componentDidMount() {\r\n    /* 实现异步过程 */\r\n\r\n    // 登陆过，但是关掉了该窗口(cookies中有userid)，\r\n    // 之后再打开没有再次登录(redux管理的user中没有_id)\r\n    const userid = Cookies.get(\"userid\");\r\n    const { _id } = this.props.user;\r\n    if (userid && _id) {\r\n      // 发送异步请求，获取user信息\r\n      // 需要在后台先写请求响应，然后在前台写发送ajax请求的函数、redux等，最后在可以在这里使用\r\n      console.log(\"发送ajax请求获取user\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // 读取cookies中的userid\r\n    const userid = Cookies.get(\"userid\");\r\n    if (!userid) {\r\n      // 如果没有，则自动重定向到登录界面\r\n      return <Redirect to=\"/login\"></Redirect>;\r\n    }\r\n    // 如果有，读取redux中的user状态\r\n    const { user } = this.props;\r\n    if (!user._id) {\r\n      // 如果user没有_id,则返回一个null,不做任何显示\r\n      return null;\r\n    } else {\r\n      // 如果有_id,则显示对应的界面，比如大神界面，老板界面，个人中心界面等\r\n      // 如果请求的是根路径，就需要根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n\r\n      // 获取请求的路径\r\n      let path = this.props.location.pathname;\r\n      if (path === \"/\") {\r\n        path = getRedirectTo(user.type, user.header);\r\n        return <Redirect to={path}></Redirect>;\r\n      }\r\n    }\r\n\r\n    // 根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/laobaninfo\" component={LaobanInfo}></Route>\r\n          <Route path=\"/dasheninfo\" component={DashenInfo}></Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({ user: state.user }), {})(Main);\r\n\r\n/* \r\n1 实现自动登陆：\r\n    情况1： 登陆过，但是关掉了该窗口(cookies中有userid)，之后再打开没有再次登录(redux管理的user中没有_id)，\r\n        发送请求获取对应的用户信息\r\n    情况2： cookies中没有userid 自动进入login界面\r\n    情况3： 判断redux管理的user中是否有_id:\r\n        没有暂时不做任何显示\r\n\r\n2 如果已经登陆了：\r\n    如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}