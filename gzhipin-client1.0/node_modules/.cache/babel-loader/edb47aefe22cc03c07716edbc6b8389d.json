{"ast":null,"code":"import \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\message\\\\message.jsx\";\n\n/* 消息列表界面的路由组件 */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nconst Item = _List.Item;\nconst Brief = Item.Brief;\n\nfunction getLastMsgs(chatMsgs) {\n  // 1 找到每个聊天的lastMsg,并用一个容器对象来保存{chat_id,lastMsg}\n  const lastMsgObjs = {};\n  chatMsgs.forEach(msg => {\n    // 得到msg的聊天id\n    const chatId = msg.chat_id; // 获取已保存的当前组件的lastMsg\n\n    const lastMsg = lastMsgObjs[chatId];\n\n    if (!lastMsg) {\n      // 没有则说明当前msg就是所在组的lastMsg\n      lastMsgObjs[chatId] = msg;\n    } else {\n      // 如果msg比lastmsg晚，就将msg保存为lastmsg\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObjs[chatId] = msg;\n      }\n    }\n  }); // 得到所有的lastMsg的数组\n\n  const lastMsgs = Object.values(lastMsgObjs); // 排序(按照create_time)降序排列\n\n  lastMsgs.sort(function (m1, m2) {\n    // 结果小于0，则m1在前\n    return m2.create_time - m1.create_time;\n  });\n  return lastMsgs;\n}\n\nclass Message extends React.Component {\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = this.props.chat; // 对chatMsgs使用chat_id进行分组\n\n    const lastMsgs = getLastMsgs(chatMsgs);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, lastMsgs.map(msg => {\n      const targetUser = msg.to === user._id ? users[msg.from] : users[msg.to];\n      return /*#__PURE__*/React.createElement(Item, {\n        key: msg._id,\n        extra: /*#__PURE__*/React.createElement(_Badge, {\n          text: 3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 24\n          }\n        }) // 未读消息数量\n        ,\n        thumb: msg.header ? require(`../../assets/images/${fdg}.png`) : null // 头像\n        ,\n        arrow: \"horizontal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, msg.content, /*#__PURE__*/React.createElement(Brief, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, users[msg.to === user._id ? msg.from : msg.to].username));\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {})(Message);","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/message/message.jsx"],"names":["React","connect","Item","Brief","getLastMsgs","chatMsgs","lastMsgObjs","forEach","msg","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","Message","Component","render","user","props","users","chat","marginTop","marginBottom","map","targetUser","to","_id","from","header","require","fdg","content","username","state"],"mappings":"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","sourcesContent":["/* 消息列表界面的路由组件 */\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Badge } from \"antd-mobile\";\r\n\r\nconst Item = List.Item;\r\nconst Brief = Item.Brief;\r\n\r\nfunction getLastMsgs(chatMsgs) {\r\n  // 1 找到每个聊天的lastMsg,并用一个容器对象来保存{chat_id,lastMsg}\r\n  const lastMsgObjs = {};\r\n  chatMsgs.forEach((msg) => {\r\n    // 得到msg的聊天id\r\n    const chatId = msg.chat_id;\r\n    // 获取已保存的当前组件的lastMsg\r\n    const lastMsg = lastMsgObjs[chatId];\r\n    if (!lastMsg) {\r\n      // 没有则说明当前msg就是所在组的lastMsg\r\n      lastMsgObjs[chatId] = msg;\r\n    } else {\r\n      // 如果msg比lastmsg晚，就将msg保存为lastmsg\r\n      if (msg.create_time > lastMsg.create_time) {\r\n        lastMsgObjs[chatId] = msg;\r\n      }\r\n    }\r\n  });\r\n  // 得到所有的lastMsg的数组\r\n  const lastMsgs = Object.values(lastMsgObjs);\r\n  // 排序(按照create_time)降序排列\r\n  lastMsgs.sort(function (m1, m2) {\r\n    // 结果小于0，则m1在前\r\n    return m2.create_time - m1.create_time;\r\n  });\r\n  return lastMsgs;\r\n}\r\n\r\nclass Message extends React.Component {\r\n  render() {\r\n    const { user } = this.props;\r\n    const { users, chatMsgs } = this.props.chat;\r\n    // 对chatMsgs使用chat_id进行分组\r\n    const lastMsgs = getLastMsgs(chatMsgs);\r\n    return (\r\n      <div>\r\n        {/* 设置上下外边距 */}\r\n        <List style={{ marginTop: 50, marginBottom: 50 }}>\r\n          {lastMsgs.map((msg) => {\r\n            const targetUser =\r\n              msg.to === user._id ? users[msg.from] : users[msg.to];\r\n            return (\r\n              <Item\r\n                key={msg._id}\r\n                extra={<Badge text={3} />} // 未读消息数量\r\n                thumb={\r\n                  msg.header ? require(`../../assets/images/${fdg}.png`) : null\r\n                } // 头像\r\n                arrow=\"horizontal\"\r\n              >\r\n                {msg.content}\r\n                <Brief>\r\n                  {users[msg.to === user._id ? msg.from : msg.to].username}\r\n                </Brief>\r\n              </Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({ user: state.user, chat: state.chat }),\r\n  {}\r\n)(Message);\r\n"]},"metadata":{},"sourceType":"module"}