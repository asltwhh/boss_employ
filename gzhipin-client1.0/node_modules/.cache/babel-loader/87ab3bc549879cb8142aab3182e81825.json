{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin, reqUpdateUser } from \"../api\";\nimport { AUTH_SUCCESS, ERROR_MSG } from \"./action-types\"; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 注册异步action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (password !== password2) {\n    return errorMsg(\"两次输入密码不一致\");\n  } //表单数据合法，返回一个发ajax请求的异步action函数\n\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (!password) {\n    return errorMsg(\"密码不能为空\");\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 异步更新数据\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await updateUser(user);\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","reqUpdateUser","AUTH_SUCCESS","ERROR_MSG","authSuccess","user","type","data","errorMsg","msg","register","username","password","password2","dispatch","response","result","code","login","updateUser"],"mappings":"AAAA;;;;;AAKA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,aAAhC,QAAqD,QAArD;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAAEC,EAAAA,IAAI,EAAEJ,YAAR;AAAsBK,EAAAA,IAAI,EAAEF;AAA5B,CAAX,CAApB,C,CACA;;;AACA,MAAMG,QAAQ,GAAIC,GAAD,KAAU;AAAEH,EAAAA,IAAI,EAAEH,SAAR;AAAmBI,EAAAA,IAAI,EAAEE;AAAzB,CAAV,CAAjB,C,CAEA;;;AACA,OAAO,MAAMC,QAAQ,GAAIL,IAAD,IAAU;AAChC,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,SAAtB;AAAiCP,IAAAA;AAAjC,MAA0CD,IAAhD,CADgC,CAGhC;;AACA,MAAI,CAACM,QAAL,EAAe;AACb,WAAOH,QAAQ,CAAC,SAAD,CAAf;AACD,GAFD,MAEO,IAAII,QAAQ,KAAKC,SAAjB,EAA4B;AACjC,WAAOL,QAAQ,CAAC,WAAD,CAAf;AACD,GAR+B,CAUhC;;;AACA,SAAO,MAAOM,QAAP,IAAoB;AACzB;AACA;AACA;;AACA;;;;;;AAMA,UAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAAC;AAAEY,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBN,MAAAA;AAAtB,KAAD,CAAlC;AACA,UAAMU,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAIS,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACD,KAHD,MAGO;AACL;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACD;AACF,GAnBD;AAoBD,CA/BM,C,CAiCP;;AACA,OAAO,MAAMS,KAAK,GAAIb,IAAD,IAAU;AAC7B,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBP,IAA/B,CAD6B,CAE7B;;AACA,MAAI,CAACM,QAAL,EAAe;AACb,WAAOH,QAAQ,CAAC,SAAD,CAAf;AACD,GAFD,MAEO,IAAI,CAACI,QAAL,EAAe;AACpB,WAAOJ,QAAQ,CAAC,QAAD,CAAf;AACD;;AAED,SAAO,MAAOM,QAAP,IAAoB;AACzB;AACA;AACA;;AACA;;;;;;AAMA,UAAMC,QAAQ,GAAG,MAAMf,QAAQ,CAAC;AAAEW,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,CAA/B;AACA,UAAMI,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAIS,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACD,KAHD,MAGO;AACL;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACD;AACF,GAnBD;AAoBD,CA7BM,C,CA+BP;;AACA,OAAO,MAAMU,UAAU,GAAId,IAAD,IAAU;AAClC,SAAO,MAAOS,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMI,UAAU,CAACd,IAAD,CAAjC;AACD,GAFD;AAGD,CAJM","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport { reqRegister, reqLogin, reqUpdateUser } from \"../api\";\r\nimport { AUTH_SUCCESS, ERROR_MSG } from \"./action-types\";\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n  const { username, password, password2, type } = user;\r\n\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (password !== password2) {\r\n    return errorMsg(\"两次输入密码不一致\");\r\n  }\r\n\r\n  //表单数据合法，返回一个发ajax请求的异步action函数\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqRegister({ username, password, type });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n  const { username, password } = user;\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (!password) {\r\n    return errorMsg(\"密码不能为空\");\r\n  }\r\n\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqLogin({ username, password });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 异步更新数据\r\nexport const updateUser = (user) => {\r\n  return async (dispatch) => {\r\n    const response = await updateUser(user);\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}