{"ast":null,"code":"import \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\message\\\\message.jsx\";\n\n/* 消息列表界面的路由组件 */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nconst Item = _List.Item;\nconst Brief = Item.Brief;\n\nfunction getLastMsgs(chatMsgs, userId) {\n  // 1 找到每个聊天的lastMsg,并用一个容器对象来保存{chat_id,lastMsg}\n  const lastMsgObjs = {};\n  chatMsgs.forEach(msg => {\n    // 对msg进行统计\n    if (msg.to === userId && !msg.read) {\n      // 如果消息是发给我的并且消息显示未读，则将msg的unReadCOunt设置为1\n      msg.unReadCount = 1;\n    } else {\n      msg.unReadCount = 0;\n    } // 得到msg的聊天id  谁给谁发的消息  fromid_toid\n\n\n    const chatId = msg.chat_id; // 获取已保存的当前组件的lastMsg\n\n    const lastMsg = lastMsgObjs[chatId];\n\n    if (!lastMsg) {\n      // 没有则说明当前msg就是所在组的lastMsg\n      lastMsgObjs[chatId] = msg;\n    } else {\n      // 保存当前组的已经统计的未读数量\n      const unReadCount = lastMsg.unReadCount; // 如果msg比lastmsg晚，就将msg保存为lastmsg\n\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObjs[chatId] = msg;\n      } // 累加unReadCount并且保存在最新的lastMsg上\n\n\n      lastMsgObjs[chatId].unReadCount = unReadCount + msg.unReadCount;\n    }\n  }); // console.log(lastMsgObjs);   {chat_id:msg}\n  // 得到所有的lastMsg的数组,将对象形式转换为数组形式\n\n  const lastMsgs = Object.values(lastMsgObjs); // console.log(lastMsgs);  [msg,...]\n  // 排序(按照create_time)降序排列\n\n  lastMsgs.sort(function (m1, m2) {\n    // 结果小于0，则m1在前\n    return m2.create_time - m1.create_time;\n  });\n  return lastMsgs;\n}\n\nclass Message extends React.Component {\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = this.props.chat; // 对chatMsgs使用chat_id进行分组\n\n    const lastMsgs = getLastMsgs(chatMsgs, user._id);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, lastMsgs.map(msg => {\n      // 得到目标用户的id\n      const targetUserId = msg.to === user._id ? msg.from : msg.to;\n      const targetUser = users[targetUserId];\n      return /*#__PURE__*/React.createElement(Item, {\n        key: msg._id,\n        extra: /*#__PURE__*/React.createElement(_Badge, {\n          text: Message.unReadCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 24\n          }\n        }) // 未读消息数量\n        ,\n        thumb: targetUser.header ? require(`../../assets/images/${targetUser.header}.png`) : null // 头像\n        ,\n        arrow: \"horizontal\",\n        onClick: () => this.props.history.push(`/chat/${targetUserId}`),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }\n      }, msg.content, /*#__PURE__*/React.createElement(Brief, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, targetUser.username));\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {})(Message);","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/message/message.jsx"],"names":["React","connect","Item","Brief","getLastMsgs","chatMsgs","userId","lastMsgObjs","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","Message","Component","render","user","props","users","chat","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","header","require","history","push","content","username","state"],"mappings":"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","sourcesContent":["/* 消息列表界面的路由组件 */\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Badge } from \"antd-mobile\";\r\n\r\nconst Item = List.Item;\r\nconst Brief = Item.Brief;\r\n\r\nfunction getLastMsgs(chatMsgs, userId) {\r\n  // 1 找到每个聊天的lastMsg,并用一个容器对象来保存{chat_id,lastMsg}\r\n  const lastMsgObjs = {};\r\n  chatMsgs.forEach((msg) => {\r\n    // 对msg进行统计\r\n    if (msg.to === userId && !msg.read) {\r\n      // 如果消息是发给我的并且消息显示未读，则将msg的unReadCOunt设置为1\r\n      msg.unReadCount = 1;\r\n    } else {\r\n      msg.unReadCount = 0;\r\n    }\r\n\r\n    // 得到msg的聊天id  谁给谁发的消息  fromid_toid\r\n    const chatId = msg.chat_id;\r\n    // 获取已保存的当前组件的lastMsg\r\n    const lastMsg = lastMsgObjs[chatId];\r\n    if (!lastMsg) {\r\n      // 没有则说明当前msg就是所在组的lastMsg\r\n      lastMsgObjs[chatId] = msg;\r\n    } else {\r\n      // 保存当前组的已经统计的未读数量\r\n      const unReadCount = lastMsg.unReadCount;\r\n      // 如果msg比lastmsg晚，就将msg保存为lastmsg\r\n      if (msg.create_time > lastMsg.create_time) {\r\n        lastMsgObjs[chatId] = msg;\r\n      }\r\n      // 累加unReadCount并且保存在最新的lastMsg上\r\n      lastMsgObjs[chatId].unReadCount = unReadCount + msg.unReadCount;\r\n    }\r\n  });\r\n  // console.log(lastMsgObjs);   {chat_id:msg}\r\n  // 得到所有的lastMsg的数组,将对象形式转换为数组形式\r\n  const lastMsgs = Object.values(lastMsgObjs);\r\n  // console.log(lastMsgs);  [msg,...]\r\n  // 排序(按照create_time)降序排列\r\n  lastMsgs.sort(function (m1, m2) {\r\n    // 结果小于0，则m1在前\r\n    return m2.create_time - m1.create_time;\r\n  });\r\n  return lastMsgs;\r\n}\r\n\r\nclass Message extends React.Component {\r\n  render() {\r\n    const { user } = this.props;\r\n    const { users, chatMsgs } = this.props.chat;\r\n    // 对chatMsgs使用chat_id进行分组\r\n    const lastMsgs = getLastMsgs(chatMsgs, user._id);\r\n    return (\r\n      <div>\r\n        {/* 设置上下外边距       我们在这个界面只需要显示聊天的最后一条消息即可 */}\r\n        <List style={{ marginTop: 50, marginBottom: 50 }}>\r\n          {lastMsgs.map((msg) => {\r\n            // 得到目标用户的id\r\n            const targetUserId = msg.to === user._id ? msg.from : msg.to;\r\n            const targetUser = users[targetUserId];\r\n            return (\r\n              <Item\r\n                key={msg._id}\r\n                extra={<Badge text={Message.unReadCount} />} // 未读消息数量\r\n                thumb={\r\n                  targetUser.header\r\n                    ? require(`../../assets/images/${targetUser.header}.png`)\r\n                    : null\r\n                } // 头像\r\n                arrow=\"horizontal\"\r\n                onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\r\n              >\r\n                {msg.content}\r\n                <Brief>{targetUser.username}</Brief>\r\n              </Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({ user: state.user, chat: state.chat }),\r\n  {}\r\n)(Message);\r\n"]},"metadata":{},"sourceType":"module"}