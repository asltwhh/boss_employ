{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList } from \"../api\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST } from \"./action-types\";\nimport io from \"socket.io-client\";\n\nfunction initIO() {} // 发送消息的异步action\n\n\nexport const sendMsg = ({\n  from,\n  to,\n  content\n}) => {\n  return dispatch => {\n    console.log(\"发送消息\", {\n      from,\n      to,\n      content\n    }); // 发送消息用的是socket.io\n  };\n}; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户信息的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重置用户信息的同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 获取用户列表的同步action\n\nconst receiveUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n}); // 注册异步action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (password !== password2) {\n    return errorMsg(\"两次输入密码不一致\");\n  } //表单数据合法，返回一个发ajax请求的异步action函数\n\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (!password) {\n    return errorMsg(\"密码不能为空\");\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 异步更新数据\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    console.log(response);\n    const result = response.data; // result：{code:0,data} {code:1,msg}\n\n    if (result.code === 0) {\n      // 分发同步action\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\n      dispatch(receiveUser(result.data));\n    } else {\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户异步action\n\nexport const getUser = () => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户列表的异步action\n\nexport const getUserList = type => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUserList(type);\n    const result = response.data; // 分发一个同步action\n\n    if (result.code === 0) {\n      dispatch(receiveUserList(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","io","initIO","sendMsg","from","to","content","dispatch","console","log","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","register","username","password","password2","response","result","code","login","updateUser","getUser","getUserList"],"mappings":"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","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport {\r\n  reqRegister,\r\n  reqLogin,\r\n  reqUpdateUser,\r\n  reqUser,\r\n  reqUserList,\r\n} from \"../api\";\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USER_LIST,\r\n} from \"./action-types\";\r\n\r\nimport io from \"socket.io-client\";\r\nfunction initIO() {}\r\n\r\n// 发送消息的异步action\r\n\r\nexport const sendMsg = ({ from, to, content }) => {\r\n  return (dispatch) => {\r\n    console.log(\"发送消息\", { from, to, content });\r\n    // 发送消息用的是socket.io\r\n  };\r\n};\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\r\n// 接收用户信息的同步action\r\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\r\n// 重置用户信息的同步action\r\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\r\n\r\n// 获取用户列表的同步action\r\nconst receiveUserList = (userList) => ({\r\n  type: RECEIVE_USER_LIST,\r\n  data: userList,\r\n});\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n  const { username, password, password2, type } = user;\r\n\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (password !== password2) {\r\n    return errorMsg(\"两次输入密码不一致\");\r\n  }\r\n\r\n  //表单数据合法，返回一个发ajax请求的异步action函数\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqRegister({ username, password, type });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n  const { username, password } = user;\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (!password) {\r\n    return errorMsg(\"密码不能为空\");\r\n  }\r\n\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqLogin({ username, password });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 异步更新数据\r\nexport const updateUser = (user) => {\r\n  return async (dispatch) => {\r\n    const response = await reqUpdateUser(user);\r\n    console.log(response);\r\n    const result = response.data; // result：{code:0,data} {code:1,msg}\r\n    if (result.code === 0) {\r\n      // 分发同步action\r\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户异步action\r\nexport const getUser = () => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUser();\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户列表的异步action\r\nexport const getUserList = (type) => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUserList(type);\r\n    const result = response.data;\r\n    // 分发一个同步action\r\n    if (result.code === 0) {\r\n      dispatch(receiveUserList(result.data));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}