{"ast":null,"code":"/* \r\n包含n个reducer函数：根据老的state和指定的action返回一个新的state\r\n*/\nimport { combineReducers } from \"redux\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_Msg_LIST, RECEIVE_Msg, MSG_READ } from \"./action-types\";\nimport { getRedirectTo } from \"../utils/index\"; // 产生user状态的reducer\n\nconst initUser = {\n  username: \"\",\n  // 用户名\n  type: \"\",\n  //用户类型\n  msg: \"\",\n  // 存放错误提示信息\n  redirectTo: \"\" //需要自动重定向的路由路径\n\n};\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      //data存放user\n      console.log(action);\n      const {\n        type,\n        header\n      } = action.data;\n      return { ...state,\n        ...action.data,\n        redirectTo: getRedirectTo(type, header)\n      };\n\n    case ERROR_MSG:\n      // data存放msg，只需要更新msg即可\n      return { ...state,\n        msg: action.data\n      };\n\n    case RECEIVE_USER:\n      // 更新成功，则此时action.data中存放的就是所有新的信息\n      // 后面还需要添加更新成功后跳转的页面，更新大神信息就去大神主界面，更新老板信息就去老板主界面\n      return action.data;\n\n    case RESET_USER:\n      // 用户没有登录成功或者cookie数据被篡改，更新信息失败，则直接将返回msg信息\n      // 后面还需要直接跳转到注册界面，因为此用户已经不存在了\n      return { ...initUser,\n        msg: action.data\n      };\n\n    default:\n      return state;\n  }\n} // 产生userlist状态的reducer\n\n\nconst initUserList = [];\n\nfunction userList(state = initUserList, action) {\n  switch (action.type) {\n    case RECEIVE_USER_LIST:\n      return action.data;\n    // data是userlist\n\n    default:\n      return state;\n  }\n} // 产生聊天状态的reducer\n\n\nconst initChat = {\n  users: {},\n  // 所有用户信息的对象  属性名：userid, 属性值：{username,header}\n  chatMsgs: [],\n  // 当前用户发出的信息以及接收到的信息的数组\n  unReadCount: 0 //总的未读数量，显式在底部导航栏的\n\n};\n\nfunction chat(state = initChat, action) {\n  switch (action.type) {\n    case RECEIVE_Msg_LIST:\n      const {\n        users,\n        chatMsgs,\n        userid\n      } = action.data;\n      return {\n        users,\n        chatMsgs,\n        unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0)\n      };\n\n    case RECEIVE_Msg:\n      // data:chatMsg\n      const {\n        chatMsg\n      } = action.data;\n      return {\n        users: state.users,\n        chatMsgs: [...state.chatMsgs, chatMsg],\n        unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0)\n      };\n\n    case MSG_READ:\n      const {\n        from,\n        to,\n        count\n      } = action.data;\n      return {\n        users: state.users,\n        // 找到某些信息的read属性，将其修改为false\n        chatMsgs: state.chatMsgs.map(msg => {}),\n        unReadCount: state.unReadCount - count\n      };\n\n    default:\n      return state;\n  }\n} // 合并所有的reducer函数，向外暴露\n\n\nconst reducers = combineReducers({\n  user,\n  userList,\n  chat\n}); // console.log(reducers);\n\nexport default reducers; // 向外暴露的结构：{user:{},userList:{},chat:{}}","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/reducers.jsx"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_Msg_LIST","RECEIVE_Msg","MSG_READ","getRedirectTo","initUser","username","type","msg","redirectTo","user","state","action","console","log","header","data","initUserList","userList","initChat","users","chatMsgs","unReadCount","chat","userid","reduce","preTotal","read","to","chatMsg","from","count","map","reducers"],"mappings":"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","sourcesContent":["/* \r\n包含n个reducer函数：根据老的state和指定的action返回一个新的state\r\n*/\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USER_LIST,\r\n  RECEIVE_Msg_LIST,\r\n  RECEIVE_Msg,\r\n  MSG_READ,\r\n} from \"./action-types\";\r\nimport { getRedirectTo } from \"../utils/index\";\r\n\r\n// 产生user状态的reducer\r\nconst initUser = {\r\n  username: \"\", // 用户名\r\n  type: \"\", //用户类型\r\n  msg: \"\", // 存放错误提示信息\r\n  redirectTo: \"\", //需要自动重定向的路由路径\r\n};\r\nfunction user(state = initUser, action) {\r\n  switch (action.type) {\r\n    case AUTH_SUCCESS: //data存放user\r\n      console.log(action);\r\n      const { type, header } = action.data;\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n        redirectTo: getRedirectTo(type, header),\r\n      };\r\n    case ERROR_MSG: // data存放msg，只需要更新msg即可\r\n      return { ...state, msg: action.data };\r\n    case RECEIVE_USER: // 更新成功，则此时action.data中存放的就是所有新的信息\r\n      // 后面还需要添加更新成功后跳转的页面，更新大神信息就去大神主界面，更新老板信息就去老板主界面\r\n      return action.data;\r\n    case RESET_USER: // 用户没有登录成功或者cookie数据被篡改，更新信息失败，则直接将返回msg信息\r\n      // 后面还需要直接跳转到注册界面，因为此用户已经不存在了\r\n      return { ...initUser, msg: action.data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 产生userlist状态的reducer\r\nconst initUserList = [];\r\nfunction userList(state = initUserList, action) {\r\n  switch (action.type) {\r\n    case RECEIVE_USER_LIST:\r\n      return action.data; // data是userlist\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 产生聊天状态的reducer\r\nconst initChat = {\r\n  users: {}, // 所有用户信息的对象  属性名：userid, 属性值：{username,header}\r\n  chatMsgs: [], // 当前用户发出的信息以及接收到的信息的数组\r\n  unReadCount: 0, //总的未读数量，显式在底部导航栏的\r\n};\r\nfunction chat(state = initChat, action) {\r\n  switch (action.type) {\r\n    case RECEIVE_Msg_LIST:\r\n      const { users, chatMsgs, userid } = action.data;\r\n      return {\r\n        users,\r\n        chatMsgs,\r\n        unReadCount: chatMsgs.reduce(\r\n          (preTotal, msg) =>\r\n            preTotal + (!msg.read && msg.to === userid ? 1 : 0),\r\n          0\r\n        ),\r\n      };\r\n    case RECEIVE_Msg: // data:chatMsg\r\n      const { chatMsg } = action.data;\r\n      return {\r\n        users: state.users,\r\n        chatMsgs: [...state.chatMsgs, chatMsg],\r\n        unReadCount:\r\n          state.unReadCount +\r\n          (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0),\r\n      };\r\n    case MSG_READ:\r\n      const { from, to, count } = action.data;\r\n      return {\r\n        users: state.users,\r\n        // 找到某些信息的read属性，将其修改为false\r\n        chatMsgs: state.chatMsgs.map((msg) => {}),\r\n        unReadCount: state.unReadCount - count,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 合并所有的reducer函数，向外暴露\r\nconst reducers = combineReducers({\r\n  user,\r\n  userList,\r\n  chat,\r\n});\r\n// console.log(reducers);\r\n\r\nexport default reducers;\r\n\r\n// 向外暴露的结构：{user:{},userList:{},chat:{}}\r\n"]},"metadata":{},"sourceType":"module"}