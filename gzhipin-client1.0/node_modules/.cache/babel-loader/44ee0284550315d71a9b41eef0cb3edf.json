{"ast":null,"code":"/* \r\n包含n个reducer函数：根据老的state和指定的action返回一个新的state\r\n*/\nimport { combineReducers } from \"redux\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USERLIST } from \"./action-types\";\nimport { getRedirectTo } from \"../utils/index\"; // 产生user状态的reducer\n\nconst initUser = {\n  username: \"\",\n  // 用户名\n  type: \"\",\n  //用户类型\n  msg: \"\",\n  // 存放错误提示信息\n  redirectTo: \"\" //需要自动重定向的路由路径\n\n};\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      //data存放user\n      console.log(action);\n      const {\n        type,\n        header\n      } = action.data;\n      return { ...state,\n        ...action.data,\n        redirectTo: getRedirectTo(type, header)\n      };\n\n    case ERROR_MSG:\n      // data存放msg，只需要更新msg即可\n      return { ...state,\n        msg: action.data\n      };\n\n    case RECEIVE_USER:\n      // 更新成功，则此时action.data中存放的就是所有新的信息\n      // 后面还需要添加更新成功后跳转的页面，更新大神信息就去大神主界面，更新老板信息就去老板主界面\n      return action.data;\n\n    case RESET_USER:\n      // 用户没有登录成功或者cookie数据被篡改，更新信息失败，则直接将返回msg信息\n      // 后面还需要直接跳转到注册界面，因为此用户已经不存在了\n      return { ...initUser,\n        msg: action.data\n      };\n\n    default:\n      return state;\n  }\n} // 产生userlist状态的reducer\n\n\nconst initUserList = [];\n\nfunction userList(state = initUserList, action) {\n  switch (action.type) {\n    case RECEIVE_USERLIST:\n      return action.data;\n    // data是userlist\n\n    default:\n      return state;\n  }\n} // 合并所有的reducer函数，向外暴露\n\n\nexport default combineReducers({\n  user,\n  userList\n}); // 向外暴露的结构：{user:{}}","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/reducers.jsx"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USERLIST","getRedirectTo","initUser","username","type","msg","redirectTo","user","state","action","console","log","header","data","initUserList","userList"],"mappings":"AAAA;;;AAGA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SACEC,YADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,gBALF,QAMO,gBANP;AAOA,SAASC,aAAT,QAA8B,gBAA9B,C,CAEA;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAAE,EADK;AACD;AACdC,EAAAA,IAAI,EAAE,EAFS;AAEL;AACVC,EAAAA,GAAG,EAAE,EAHU;AAGN;AACTC,EAAAA,UAAU,EAAE,EAJG,CAIC;;AAJD,CAAjB;;AAMA,SAASC,IAAT,CAAcC,KAAK,GAAGN,QAAtB,EAAgCO,MAAhC,EAAwC;AACtC,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKR,YAAL;AAAmB;AACjBc,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,YAAM;AAAEL,QAAAA,IAAF;AAAQQ,QAAAA;AAAR,UAAmBH,MAAM,CAACI,IAAhC;AACA,aAAO,EACL,GAAGL,KADE;AAEL,WAAGC,MAAM,CAACI,IAFL;AAGLP,QAAAA,UAAU,EAAEL,aAAa,CAACG,IAAD,EAAOQ,MAAP;AAHpB,OAAP;;AAKF,SAAKf,SAAL;AAAgB;AACd,aAAO,EAAE,GAAGW,KAAL;AAAYH,QAAAA,GAAG,EAAEI,MAAM,CAACI;AAAxB,OAAP;;AACF,SAAKf,YAAL;AAAmB;AACjB;AACA,aAAOW,MAAM,CAACI,IAAd;;AACF,SAAKd,UAAL;AAAiB;AACf;AACA,aAAO,EAAE,GAAGG,QAAL;AAAeG,QAAAA,GAAG,EAAEI,MAAM,CAACI;AAA3B,OAAP;;AACF;AACE,aAAOL,KAAP;AAlBJ;AAoBD,C,CAED;;;AACA,MAAMM,YAAY,GAAG,EAArB;;AACA,SAASC,QAAT,CAAkBP,KAAK,GAAGM,YAA1B,EAAwCL,MAAxC,EAAgD;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKJ,gBAAL;AACE,aAAOS,MAAM,CAACI,IAAd;AAAoB;;AACtB;AACE,aAAOL,KAAP;AAJJ;AAMD,C,CAED;;;AACA,eAAeb,eAAe,CAAC;AAC7BY,EAAAA,IAD6B;AAE7BQ,EAAAA;AAF6B,CAAD,CAA9B,C,CAKA","sourcesContent":["/* \r\n包含n个reducer函数：根据老的state和指定的action返回一个新的state\r\n*/\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USERLIST,\r\n} from \"./action-types\";\r\nimport { getRedirectTo } from \"../utils/index\";\r\n\r\n// 产生user状态的reducer\r\nconst initUser = {\r\n  username: \"\", // 用户名\r\n  type: \"\", //用户类型\r\n  msg: \"\", // 存放错误提示信息\r\n  redirectTo: \"\", //需要自动重定向的路由路径\r\n};\r\nfunction user(state = initUser, action) {\r\n  switch (action.type) {\r\n    case AUTH_SUCCESS: //data存放user\r\n      console.log(action);\r\n      const { type, header } = action.data;\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n        redirectTo: getRedirectTo(type, header),\r\n      };\r\n    case ERROR_MSG: // data存放msg，只需要更新msg即可\r\n      return { ...state, msg: action.data };\r\n    case RECEIVE_USER: // 更新成功，则此时action.data中存放的就是所有新的信息\r\n      // 后面还需要添加更新成功后跳转的页面，更新大神信息就去大神主界面，更新老板信息就去老板主界面\r\n      return action.data;\r\n    case RESET_USER: // 用户没有登录成功或者cookie数据被篡改，更新信息失败，则直接将返回msg信息\r\n      // 后面还需要直接跳转到注册界面，因为此用户已经不存在了\r\n      return { ...initUser, msg: action.data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 产生userlist状态的reducer\r\nconst initUserList = [];\r\nfunction userList(state = initUserList, action) {\r\n  switch (action.type) {\r\n    case RECEIVE_USERLIST:\r\n      return action.data; // data是userlist\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 合并所有的reducer函数，向外暴露\r\nexport default combineReducers({\r\n  user,\r\n  userList,\r\n});\r\n\r\n// 向外暴露的结构：{user:{}}\r\n"]},"metadata":{},"sourceType":"module"}