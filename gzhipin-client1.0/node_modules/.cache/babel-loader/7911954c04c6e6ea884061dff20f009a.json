{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser } from \"../api\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USERLIST } from \"./action-types\"; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户信息的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重置用户信息的同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 获取用户列表的同步action\n\nexport const receiveUserList = userlist => ({\n  type: RECEIVE_USERLIST,\n  data: userlist\n}); // 注册异步action\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (password !== password2) {\n    return errorMsg(\"两次输入密码不一致\");\n  } //表单数据合法，返回一个发ajax请求的异步action函数\n\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (!password) {\n    return errorMsg(\"密码不能为空\");\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 异步更新数据\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    console.log(response);\n    const result = response.data; // result：{code:0,data} {code:1,msg}\n\n    if (result.code === 0) {\n      // 分发同步action\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\n      dispatch(receiveUser(result.data));\n    } else {\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户异步action\n\nexport const getUser = () => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","reqUpdateUser","reqUser","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USERLIST","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receiveUserList","userlist","register","username","password","password2","dispatch","response","result","code","login","updateUser","console","log","getUser"],"mappings":"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","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser } from \"../api\";\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USERLIST,\r\n} from \"./action-types\";\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\r\n// 接收用户信息的同步action\r\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\r\n// 重置用户信息的同步action\r\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\r\n\r\n// 获取用户列表的同步action\r\nexport const receiveUserList = (userlist) => ({\r\n  type: RECEIVE_USERLIST,\r\n  data: userlist,\r\n});\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n  const { username, password, password2, type } = user;\r\n\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (password !== password2) {\r\n    return errorMsg(\"两次输入密码不一致\");\r\n  }\r\n\r\n  //表单数据合法，返回一个发ajax请求的异步action函数\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqRegister({ username, password, type });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n  const { username, password } = user;\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (!password) {\r\n    return errorMsg(\"密码不能为空\");\r\n  }\r\n\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqLogin({ username, password });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 异步更新数据\r\nexport const updateUser = (user) => {\r\n  return async (dispatch) => {\r\n    const response = await reqUpdateUser(user);\r\n    console.log(response);\r\n    const result = response.data; // result：{code:0,data} {code:1,msg}\r\n    if (result.code === 0) {\r\n      // 分发同步action\r\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户异步action\r\nexport const getUser = () => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUser();\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}