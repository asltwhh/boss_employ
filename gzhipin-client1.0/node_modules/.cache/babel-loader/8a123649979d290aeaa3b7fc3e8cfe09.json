{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList } from \"../api\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST } from \"./action-types\";\nimport io from \"socket.io-client\";\n/* \r\n单例对象：整个内存中仅有一个socket\r\n   1 创建对象之前：判断对象是否已经创建，只有当不存在时才创建\r\n   2 创建对象之后：保存对象在io中\r\n*/\n\nfunction initIO() {\n  if (!io.socket) {\n    // 连接服务器,得到与服务器的连接对象 ws是协议，类似于http\n    io.socket = io(\"ws://localhost:4000\"); // 保存socket对象\n  } // 接收来自服务器端的消息\n\n\n  socket.on(\"receiveMsg\", function (data) {\n    console.log(\"接收来自服务器端的消息：\", data);\n  });\n} // 发送消息的异步action\n\n\nexport const sendMsg = ({\n  from,\n  to,\n  content\n}) => {\n  return dispatch => {\n    console.log(\"发送消息\", {\n      from,\n      to,\n      content\n    }); // 发送消息用的是socket.io\n  };\n}; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户信息的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重置用户信息的同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 获取用户列表的同步action\n\nconst receiveUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n}); // 注册异步action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (password !== password2) {\n    return errorMsg(\"两次输入密码不一致\");\n  } //表单数据合法，返回一个发ajax请求的异步action函数\n\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user; // 做表单的前台验证\n\n  if (!username) {\n    return errorMsg(\"用户名不能为空\");\n  } else if (!password) {\n    return errorMsg(\"密码不能为空\");\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 异步更新数据\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    console.log(response);\n    const result = response.data; // result：{code:0,data} {code:1,msg}\n\n    if (result.code === 0) {\n      // 分发同步action\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\n      dispatch(receiveUser(result.data));\n    } else {\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户异步action\n\nexport const getUser = () => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户列表的异步action\n\nexport const getUserList = type => {\n  return async dispatch => {\n    // 执行异步ajax请求\n    const response = await reqUserList(type);\n    const result = response.data; // 分发一个同步action\n\n    if (result.code === 0) {\n      dispatch(receiveUserList(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","io","initIO","socket","on","data","console","log","sendMsg","from","to","content","dispatch","authSuccess","user","type","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","register","username","password","password2","response","result","code","login","updateUser","getUser","getUserList"],"mappings":"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","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport {\r\n  reqRegister,\r\n  reqLogin,\r\n  reqUpdateUser,\r\n  reqUser,\r\n  reqUserList,\r\n} from \"../api\";\r\nimport {\r\n  AUTH_SUCCESS,\r\n  ERROR_MSG,\r\n  RECEIVE_USER,\r\n  RESET_USER,\r\n  RECEIVE_USER_LIST,\r\n} from \"./action-types\";\r\n\r\nimport io from \"socket.io-client\";\r\n\r\n/* \r\n单例对象：整个内存中仅有一个socket\r\n   1 创建对象之前：判断对象是否已经创建，只有当不存在时才创建\r\n   2 创建对象之后：保存对象在io中\r\n*/\r\nfunction initIO() {\r\n  if (!io.socket) {\r\n    // 连接服务器,得到与服务器的连接对象 ws是协议，类似于http\r\n    io.socket = io(\"ws://localhost:4000\");\r\n\r\n    // 保存socket对象\r\n  }\r\n\r\n  // 接收来自服务器端的消息\r\n  socket.on(\"receiveMsg\", function (data) {\r\n    console.log(\"接收来自服务器端的消息：\", data);\r\n  });\r\n}\r\n\r\n// 发送消息的异步action\r\nexport const sendMsg = ({ from, to, content }) => {\r\n  return (dispatch) => {\r\n    console.log(\"发送消息\", { from, to, content });\r\n    // 发送消息用的是socket.io\r\n  };\r\n};\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg });\r\n// 接收用户信息的同步action\r\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user });\r\n// 重置用户信息的同步action\r\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg });\r\n\r\n// 获取用户列表的同步action\r\nconst receiveUserList = (userList) => ({\r\n  type: RECEIVE_USER_LIST,\r\n  data: userList,\r\n});\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n  const { username, password, password2, type } = user;\r\n\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (password !== password2) {\r\n    return errorMsg(\"两次输入密码不一致\");\r\n  }\r\n\r\n  //表单数据合法，返回一个发ajax请求的异步action函数\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqRegister({ username, password, type });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n  const { username, password } = user;\r\n  // 做表单的前台验证\r\n  if (!username) {\r\n    return errorMsg(\"用户名不能为空\");\r\n  } else if (!password) {\r\n    return errorMsg(\"密码不能为空\");\r\n  }\r\n\r\n  return async (dispatch) => {\r\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n    // 还需要再then再得到response\r\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n    /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n    const response = await reqLogin({ username, password });\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      // 成功,分发授权成功的同步action\r\n      dispatch(authSuccess(result.data));\r\n    } else {\r\n      // 失败,分发提示错误信息的同步action\r\n      dispatch(errorMsg(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 异步更新数据\r\nexport const updateUser = (user) => {\r\n  return async (dispatch) => {\r\n    const response = await reqUpdateUser(user);\r\n    console.log(response);\r\n    const result = response.data; // result：{code:0,data} {code:1,msg}\r\n    if (result.code === 0) {\r\n      // 分发同步action\r\n      // 更新成功，保存,data中存放的是用户的用户名，id,type,post,salary,company等信息\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      // 没有登录或者cookie的信息被篡改了，则会报出错误信息：请先登录\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户异步action\r\nexport const getUser = () => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUser();\r\n    const result = response.data;\r\n    if (result.code === 0) {\r\n      dispatch(receiveUser(result.data));\r\n    } else {\r\n      dispatch(resetUser(result.msg));\r\n    }\r\n  };\r\n};\r\n\r\n// 获取用户列表的异步action\r\nexport const getUserList = (type) => {\r\n  return async (dispatch) => {\r\n    // 执行异步ajax请求\r\n    const response = await reqUserList(type);\r\n    const result = response.data;\r\n    // 分发一个同步action\r\n    if (result.code === 0) {\r\n      dispatch(receiveUserList(result.data));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}