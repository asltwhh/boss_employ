{"ast":null,"code":"/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\nimport { reqRegister, reqLogin } from '../api';\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-types'; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 注册异步action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user;\n  return async dispatch => {\n    // 做表单的前台验证\n    if (password !== password2) {\n      return errorMsg('两次输入密码不一致');\n    } // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n    const promise = reqRegister(user);\r\n    promise.then(response => {\r\n        const result = response.data;  {code:0/1,data:user,msg:''}\r\n    })\r\n    */\n\n\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  return async dispatch => {\n    // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\n    // 还需要再then再得到response\n    // 但是一旦某个语句使用了await,就需要在其前面添加async\n\n    /* \r\n    const promise = reqRegister(user);\r\n    promise.then(response => {\r\n        const result = response.data;  {code:0/1,data:user,msg:''}\r\n    })\r\n    */\n    const response = await reqLogin(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功,分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败,分发提示错误信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client/src/redux/actions.jsx"],"names":["reqRegister","reqLogin","AUTH_SUCCESS","ERROR_MSG","authSuccess","user","type","data","errorMsg","msg","register","username","password","password2","dispatch","response","result","code","login"],"mappings":"AAAA;;;;;AAKA,SAAQA,WAAR,EAAoBC,QAApB,QAAmC,QAAnC;AACA,SAAQC,YAAR,EAAqBC,SAArB,QAAqC,gBAArC,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAACC,EAAAA,IAAI,EAACJ,YAAN;AAAoBK,EAAAA,IAAI,EAACF;AAAzB,CAAX,CAApB,C,CACA;;;AACA,MAAMG,QAAQ,GAAIC,GAAD,KAAU;AAACH,EAAAA,IAAI,EAACH,SAAN;AAAiBI,EAAAA,IAAI,EAACE;AAAtB,CAAV,CAAjB,C,CAEA;;;AACA,OAAO,MAAMC,QAAQ,GAAIL,IAAD,IAAU;AAE9B,QAAM;AAACM,IAAAA,QAAD;AAAUC,IAAAA,QAAV;AAAmBC,IAAAA,SAAnB;AAA6BP,IAAAA;AAA7B,MAAqCD,IAA3C;AACA,SAAO,MAAMS,QAAN,IAAkB;AAErB;AACA,QAAGF,QAAQ,KAAKC,SAAhB,EAA2B;AACvB,aAAOL,QAAQ,CAAC,WAAD,CAAf;AACH,KALoB,CAOrB;AACA;AACA;;AACA;;;;;;;;AAMA,UAAMO,QAAQ,GAAG,MAAMf,WAAW,CAAC;AAACW,MAAAA,QAAD;AAAUC,MAAAA,QAAV;AAAmBN,MAAAA;AAAnB,KAAD,CAAlC;AACA,UAAMU,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAGS,MAAM,CAACC,IAAP,KAAgB,CAAnB,EAAqB;AACjB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACH,KAHD,MAGK;AACD;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACH;AACJ,GAzBD;AA0BH,CA7BM,C,CA+BP;;AACA,OAAO,MAAMS,KAAK,GAAIb,IAAD,IAAU;AAC3B,SAAO,MAAMS,QAAN,IAAkB;AACrB;AACA;AACA;;AACA;;;;;;AAMA,UAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACI,IAAD,CAA/B;AACA,UAAMW,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACA,QAAGS,MAAM,CAACC,IAAP,KAAgB,CAAnB,EAAqB;AACjB;AACAH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACH,KAHD,MAGK;AACD;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,GAAR,CAAT,CAAR;AACH;AACJ,GAnBD;AAoBH,CArBM","sourcesContent":["/* \r\n包含多个action creators\r\n    异步action\r\n    同步action\r\n*/\r\nimport {reqRegister,reqLogin} from '../api'\r\nimport {AUTH_SUCCESS,ERROR_MSG} from './action-types'\r\n\r\n// 授权成功的同步action\r\nconst authSuccess = (user) => ({type:AUTH_SUCCESS, data:user})\r\n// 错误提示信息的同步action\r\nconst errorMsg = (msg) => ({type:ERROR_MSG, data:msg})\r\n\r\n// 注册异步action\r\nexport const register = (user) => {\r\n\r\n    const {username,password,password2,type} = user;\r\n    return async dispatch => {\r\n\r\n        // 做表单的前台验证\r\n        if(password !== password2) {\r\n            return errorMsg('两次输入密码不一致');\r\n        }\r\n\r\n        // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n        // 还需要再then再得到response\r\n        // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n        /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n        const response = await reqRegister({username,password,type});\r\n        const result = response.data;\r\n        if(result.code === 0){\r\n            // 成功,分发授权成功的同步action\r\n            dispatch(authSuccess(result.data));\r\n        }else{\r\n            // 失败,分发提示错误信息的同步action\r\n            dispatch(errorMsg(result.msg))\r\n        }\r\n    }\r\n} \r\n\r\n// 登录异步action\r\nexport const login = (user) => {\r\n    return async dispatch => {\r\n        // 发送注册的异步请求   使用await可以直接获取到response，不使用await得到的是promise对象\r\n        // 还需要再then再得到response\r\n        // 但是一旦某个语句使用了await,就需要在其前面添加async\r\n        /* \r\n        const promise = reqRegister(user);\r\n        promise.then(response => {\r\n            const result = response.data;  {code:0/1,data:user,msg:''}\r\n        })\r\n        */\r\n        const response = await reqLogin(user);\r\n        const result = response.data;\r\n        if(result.code === 0){\r\n            // 成功,分发授权成功的同步action\r\n            dispatch(authSuccess(result.data));\r\n        }else{\r\n            // 失败,分发提示错误信息的同步action\r\n            dispatch(errorMsg(result.msg))\r\n        }\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}