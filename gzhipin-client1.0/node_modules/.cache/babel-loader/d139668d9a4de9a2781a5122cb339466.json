{"ast":null,"code":"var _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\main\\\\main.jsx\";\n\n/* \r\n    主路由组件\r\n*/\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\n\nimport LaobanInfo from \"../laoban-info/laoban-info\";\nimport DashenInfo from \"../dashen-info/dashen-info\";\nimport { getRedirectTo } from \"../../utils\";\n\nclass Main extends React.Component {\n  render() {\n    /* // 检查用户是否登陆，如果没有则自动重定向到登录界面\r\n    const { user } = this.props;\r\n    if (!user._id) {\r\n      return <Redirect to=\"/login\" />;\r\n    } */\n    // 读取cookies中的userid\n    const userid = Cookies.get(\"userid\"); //     如果没有，则自动重定向到登录界面\n\n    if (!userid) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      });\n    } //     如果有，读取redux中的user状态\n\n\n    const {\n      user\n    } = this.props;\n\n    if (!user._id) {\n      // 如果user没有_id,则返回一个null,不做任何显示\n      return null;\n    } else {\n      // 如果有_id,则显示对应的界面\n      // 如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\n      // 获取请求的路径\n      const path = this.props.location.pathname;\n\n      if (path === \"/\") {\n        getRedirectTo(user.type, user.header);\n      }\n    } // 根据user的header和type计算得到一个重定向的路径，并且自动重定向\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/laobaninfo\",\n      component: LaobanInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/dasheninfo\",\n      component: DashenInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), {})(Main);\n/* \r\n1 实现自动登陆：打开3000\r\n    情况1： cookies中有userid\r\n        发送请求获取对应的用户信息，暂时不做任何显示\r\n    情况2： cookies中没有userid\r\n        自动进入login界面\r\n2 如果已经登陆了：\r\n    如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n*/","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/main/main.jsx"],"names":["React","Switch","Route","Redirect","connect","Cookies","LaobanInfo","DashenInfo","getRedirectTo","Main","Component","render","userid","get","user","props","_id","path","location","pathname","type","header","state"],"mappings":";;AAAA;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAAiC;;AAEjC,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAmC;AACjCC,EAAAA,MAAM,GAAG;AACP;;;;;AAMA;AACA,UAAMC,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,QAAZ,CAAf,CARO,CASP;;AACA,QAAI,CAACD,MAAL,EAAa;AACX,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAZM,CAaP;;;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,KAAKC,KAAtB;;AACA,QAAI,CAACD,IAAI,CAACE,GAAV,EAAe;AACb;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL;AACA;AAEA;AACA,YAAMC,IAAI,GAAG,KAAKF,KAAL,CAAWG,QAAX,CAAoBC,QAAjC;;AACA,UAAIF,IAAI,KAAK,GAAb,EAAkB;AAChBT,QAAAA,aAAa,CAACM,IAAI,CAACM,IAAN,EAAYN,IAAI,CAACO,MAAjB,CAAb;AACD;AACF,KA3BM,CA6BP;;;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEf,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEC,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAQD;;AAvCgC;;AA0CnC,eAAeH,OAAO,CAAEkB,KAAD,KAAY;AAAER,EAAAA,IAAI,EAAEQ,KAAK,CAACR;AAAd,CAAZ,CAAD,EAAoC,EAApC,CAAP,CAA+CL,IAA/C,CAAf;AAEA","sourcesContent":["/* \r\n    主路由组件\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\r\n\r\nimport LaobanInfo from \"../laoban-info/laoban-info\";\r\nimport DashenInfo from \"../dashen-info/dashen-info\";\r\nimport { getRedirectTo } from \"../../utils\";\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    /* // 检查用户是否登陆，如果没有则自动重定向到登录界面\r\n    const { user } = this.props;\r\n    if (!user._id) {\r\n      return <Redirect to=\"/login\" />;\r\n    } */\r\n\r\n    // 读取cookies中的userid\r\n    const userid = Cookies.get(\"userid\");\r\n    //     如果没有，则自动重定向到登录界面\r\n    if (!userid) {\r\n      return <Redirect to=\"/login\"></Redirect>;\r\n    }\r\n    //     如果有，读取redux中的user状态\r\n    const { user } = this.props;\r\n    if (!user._id) {\r\n      // 如果user没有_id,则返回一个null,不做任何显示\r\n      return null;\r\n    } else {\r\n      // 如果有_id,则显示对应的界面\r\n      // 如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n\r\n      // 获取请求的路径\r\n      const path = this.props.location.pathname;\r\n      if (path === \"/\") {\r\n        getRedirectTo(user.type, user.header);\r\n      }\r\n    }\r\n\r\n    // 根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/laobaninfo\" component={LaobanInfo}></Route>\r\n          <Route path=\"/dasheninfo\" component={DashenInfo}></Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({ user: state.user }), {})(Main);\r\n\r\n/* \r\n1 实现自动登陆：打开3000\r\n    情况1： cookies中有userid\r\n        发送请求获取对应的用户信息，暂时不做任何显示\r\n    情况2： cookies中没有userid\r\n        自动进入login界面\r\n2 如果已经登陆了：\r\n    如果请求根路径，会根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}