{"ast":null,"code":"import \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\main\\\\main.jsx\";\n\n/* \r\n    主路由组件\r\n*/\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\n\nimport LaobanInfo from \"../laoban-info/laoban-info\";\nimport DashenInfo from \"../dashen-info/dashen-info\";\nimport { getRedirectTo } from \"../../utils\";\nimport { getUser } from \"../../redux/actions\";\nimport Dashen from \"../dashen/dashen\";\nimport Laoban from \"../laoban/laoban\";\nimport Message from \"../message/message\";\nimport Personal from \"../personal/personal\";\nimport NotFound from \"../../components/notfound/notfound\";\n\nclass Main extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.navList = [{\n      path: \"/laoban\",\n      // 路由路径\n      component: Laoban,\n      // 显示的路由组件\n      title: \"大神列表\",\n      // 顶部的导航栏内容\n      icon: \"dashen\",\n      // 底部显示的图标\n      text: \"大神\" // 图标下的文字\n\n    }, {\n      path: \"/dashen\",\n      component: Laoban,\n      title: \"老板列表\",\n      icon: \"laoban\",\n      text: \"老板\"\n    }, {\n      path: \"/message\",\n      component: Message,\n      title: \"消息列表\",\n      icon: \"message\",\n      text: \"消息\"\n    }, {\n      path: \"/personal\",\n      component: Personal,\n      title: \"个人中心\",\n      icon: \"personal\",\n      text: \"个人\"\n    }];\n  }\n\n  componentDidMount() {\n    /* 实现异步过程 */\n    console.log(\"componentDidMount()执行啦\"); // (1) 登陆过，但是关掉了该窗口(cookies中有userid)，\n    // 之后再打开没有再次登录(redux管理的user中没有_id)\n\n    const userid = Cookies.get(\"userid\");\n    const {\n      _id\n    } = this.props.user;\n\n    if (userid && !_id) {\n      // 发送异步请求，获取user信息\n      // 需要在后台先写请求响应，然后在前台写发送ajax请求的函数、redux等，最后在可以在这里使用\n      this.props.getUser(); // 发送请求后更新了redux中的state，从而使得Main组件接收到的user属性发生了改变，从而重新render()\n      // 根据我们在render()中写的内容，此时就会return null\n    }\n  }\n\n  render() {\n    /* (2) cookies中没有userid,则直接重定向到登录界面 */\n    // 读取cookies中的userid\n    const userid = Cookies.get(\"userid\");\n\n    if (!userid) {\n      // 如果没有，则自动重定向到登录界面\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }\n      });\n    }\n    /* \r\n      (3) cookies中有userid \r\n      判断redux管理的user中是否有_id(有则说明打开浏览器界面时又登录了一次)\r\n    */\n\n\n    const {\n      user\n    } = this.props;\n    /* \r\n      在这个添加一个debugger,则在第一次渲染界面上就会出现断点\r\n      如果我们之前登陆了，然后关闭了该页面(cookies中有userid)，再次打开访问根路径\r\n          则会自动根据type和header重导向到laobaninfo/daseninfo/laoban/dashen\r\n      然后刷新一下界面，则会出现redux没有使用的状态，这是因为还没有dispatch任何的action\r\n          所以redux还没有使用\r\n      刷新页面之后，会自动pause，此时cookies中有userid,但是user中没有_id\r\n      点击下一步：就会进入return null的步骤\r\n      然后再点击 resume script execution 则会结束第一次render,自动调用componentDidMount,\r\n          发送异步请求，dispatch(action)，然后更新redux,从而更新Main组件中的user,并且再次\r\n          render(),到了debugger这儿再次pause,点击 resume script execution 之后会直接显示\r\n          对应的页面\r\n      \r\n    \r\n    */\n    // debugger;\n\n    if (!user._id) {\n      // 如果user没有_id,则返回一个null,不做任何显示\n      return null;\n    } else {\n      /* 如果有_id,则显示对应的界面，比如大神界面，老板界面，个人中心界面等 */\n      // 获取请求的路径\n      let path = this.props.location.pathname; // 如果请求的是根路径，就需要根据user的header和type计算得到一个重定向的路径，并且自动重定向\n\n      if (path === \"/\") {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 16\n          }\n        });\n      }\n    } // 判断navList中有没有和当前请求的路径相同的路径，有则显示对应的导航栏，否则不显示\n    // 因为除了dashen/laoban/message/personal外，其余组件均具备自己的导航栏\n\n\n    const {\n      navList\n    } = this;\n    const path = this.props.location.pathname; //当前请求的路径\n\n    const currentNav = navList.find(nav => nav.path === path);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, currentNav ? /*#__PURE__*/React.createElement(_NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 23\n      }\n    }, currentNav.title) : null, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/laobaninfo\",\n      component: LaobanInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/dasheninfo\",\n      component: DashenInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }), navList.map(nav => /*#__PURE__*/React.createElement(Route, {\n      path: nav.path,\n      component: nav.component,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), {\n  getUser\n})(Main);\n/* \r\n1 实现自动登陆：\r\n  在componentDidMount()中实现：\r\n    1) 登陆过，但是关掉了该窗口(cookies中有userid)，之后再打开没有再次登录(redux管理的user中没有_id)，\r\n       发送请求获取对应的用户信息 \r\n  在render()中实现：  \r\n    2) cookies中没有userid(之前没有登录，或者登陆了也注销了) 自动进入login界面\r\n    3) cookies中有userid：判断redux管理的user中是否有_id：\r\n         1：没有暂时不做任何显示(因为我们需要在componentDidMount中发送请求)\r\n         2：有说明当前已经登陆，则显示对应的界面(请求的路径)\r\n          如果请求根路径，会根据user的header和type计算得到一个重定向的路径，\r\n          并且自动重定向\r\n*/","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/main/main.jsx"],"names":["React","Switch","Route","Redirect","connect","Cookies","LaobanInfo","DashenInfo","getRedirectTo","getUser","Dashen","Laoban","Message","Personal","NotFound","Main","Component","navList","path","component","title","icon","text","componentDidMount","console","log","userid","get","_id","props","user","render","location","pathname","type","header","currentNav","find","nav","map","state"],"mappings":"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","sourcesContent":["/* \r\n    主路由组件\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Cookies from \"js-cookie\"; //可以操作前端cookie的对象 set()/remove()\r\n\r\nimport LaobanInfo from \"../laoban-info/laoban-info\";\r\nimport DashenInfo from \"../dashen-info/dashen-info\";\r\nimport { getRedirectTo } from \"../../utils\";\r\nimport { getUser } from \"../../redux/actions\";\r\nimport Dashen from \"../dashen/dashen\";\r\nimport Laoban from \"../laoban/laoban\";\r\nimport Message from \"../message/message\";\r\nimport Personal from \"../personal/personal\";\r\nimport NotFound from \"../../components/notfound/notfound\";\r\nimport { NavBar } from \"antd-mobile\";\r\n\r\nclass Main extends React.Component {\r\n  // 给组件对象添加属性，添加static是给组件类添加属性\r\n  navList = [\r\n    {\r\n      path: \"/laoban\", // 路由路径\r\n      component: Laoban, // 显示的路由组件\r\n      title: \"大神列表\", // 顶部的导航栏内容\r\n      icon: \"dashen\", // 底部显示的图标\r\n      text: \"大神\", // 图标下的文字\r\n    },\r\n    {\r\n      path: \"/dashen\",\r\n      component: Laoban,\r\n      title: \"老板列表\",\r\n      icon: \"laoban\",\r\n      text: \"老板\",\r\n    },\r\n    {\r\n      path: \"/message\",\r\n      component: Message,\r\n      title: \"消息列表\",\r\n      icon: \"message\",\r\n      text: \"消息\",\r\n    },\r\n    {\r\n      path: \"/personal\",\r\n      component: Personal,\r\n      title: \"个人中心\",\r\n      icon: \"personal\",\r\n      text: \"个人\",\r\n    },\r\n  ];\r\n  componentDidMount() {\r\n    /* 实现异步过程 */\r\n    console.log(\"componentDidMount()执行啦\");\r\n\r\n    // (1) 登陆过，但是关掉了该窗口(cookies中有userid)，\r\n    // 之后再打开没有再次登录(redux管理的user中没有_id)\r\n    const userid = Cookies.get(\"userid\");\r\n    const { _id } = this.props.user;\r\n    if (userid && !_id) {\r\n      // 发送异步请求，获取user信息\r\n      // 需要在后台先写请求响应，然后在前台写发送ajax请求的函数、redux等，最后在可以在这里使用\r\n      this.props.getUser();\r\n      // 发送请求后更新了redux中的state，从而使得Main组件接收到的user属性发生了改变，从而重新render()\r\n      // 根据我们在render()中写的内容，此时就会return null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    /* (2) cookies中没有userid,则直接重定向到登录界面 */\r\n    // 读取cookies中的userid\r\n    const userid = Cookies.get(\"userid\");\r\n    if (!userid) {\r\n      // 如果没有，则自动重定向到登录界面\r\n      return <Redirect to=\"/login\"></Redirect>;\r\n    }\r\n\r\n    /* \r\n      (3) cookies中有userid \r\n      判断redux管理的user中是否有_id(有则说明打开浏览器界面时又登录了一次)\r\n    */\r\n    const { user } = this.props;\r\n    /* \r\n      在这个添加一个debugger,则在第一次渲染界面上就会出现断点\r\n      如果我们之前登陆了，然后关闭了该页面(cookies中有userid)，再次打开访问根路径\r\n          则会自动根据type和header重导向到laobaninfo/daseninfo/laoban/dashen\r\n      然后刷新一下界面，则会出现redux没有使用的状态，这是因为还没有dispatch任何的action\r\n          所以redux还没有使用\r\n      刷新页面之后，会自动pause，此时cookies中有userid,但是user中没有_id\r\n      点击下一步：就会进入return null的步骤\r\n      然后再点击 resume script execution 则会结束第一次render,自动调用componentDidMount,\r\n          发送异步请求，dispatch(action)，然后更新redux,从而更新Main组件中的user,并且再次\r\n          render(),到了debugger这儿再次pause,点击 resume script execution 之后会直接显示\r\n          对应的页面\r\n      \r\n    \r\n    */\r\n    // debugger;\r\n    if (!user._id) {\r\n      // 如果user没有_id,则返回一个null,不做任何显示\r\n      return null;\r\n    } else {\r\n      /* 如果有_id,则显示对应的界面，比如大神界面，老板界面，个人中心界面等 */\r\n\r\n      // 获取请求的路径\r\n      let path = this.props.location.pathname;\r\n      // 如果请求的是根路径，就需要根据user的header和type计算得到一个重定向的路径，并且自动重定向\r\n      if (path === \"/\") {\r\n        path = getRedirectTo(user.type, user.header);\r\n        return <Redirect to={path}></Redirect>;\r\n      }\r\n    }\r\n\r\n    // 判断navList中有没有和当前请求的路径相同的路径，有则显示对应的导航栏，否则不显示\r\n    // 因为除了dashen/laoban/message/personal外，其余组件均具备自己的导航栏\r\n    const { navList } = this;\r\n    const path = this.props.location.pathname; //当前请求的路径\r\n    const currentNav = navList.find((nav) => nav.path === path);\r\n\r\n    return (\r\n      <div>\r\n        {currentNav ? <NavBar>{currentNav.title}</NavBar> : null}\r\n        <Switch>\r\n          <Route path=\"/laobaninfo\" component={LaobanInfo}></Route>\r\n          <Route path=\"/dasheninfo\" component={DashenInfo}></Route>\r\n          {navList.map((nav) => (\r\n            <Route path={nav.path} component={nav.component}></Route>\r\n          ))}\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({ user: state.user }), { getUser })(Main);\r\n\r\n/* \r\n1 实现自动登陆：\r\n  在componentDidMount()中实现：\r\n    1) 登陆过，但是关掉了该窗口(cookies中有userid)，之后再打开没有再次登录(redux管理的user中没有_id)，\r\n       发送请求获取对应的用户信息 \r\n  在render()中实现：  \r\n    2) cookies中没有userid(之前没有登录，或者登陆了也注销了) 自动进入login界面\r\n    3) cookies中有userid：判断redux管理的user中是否有_id：\r\n         1：没有暂时不做任何显示(因为我们需要在componentDidMount中发送请求)\r\n         2：有说明当前已经登陆，则显示对应的界面(请求的路径)\r\n          如果请求根路径，会根据user的header和type计算得到一个重定向的路径，\r\n          并且自动重定向\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}