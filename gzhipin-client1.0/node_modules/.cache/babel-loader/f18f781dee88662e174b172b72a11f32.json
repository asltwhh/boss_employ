{"ast":null,"code":"import \"antd-mobile/es/grid/style\";\nimport _Grid from \"antd-mobile/es/grid\";\nimport \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nimport \"antd-mobile/es/icon/style\";\nimport _Icon from \"antd-mobile/es/icon\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\containers\\\\chat\\\\chat.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport QueueAnim from \"rc-queue-anim\";\nimport { sendMsg, readMsg } from \"../../redux/actions\";\nconst Item = _List.Item;\n\nclass Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      content: \"\",\n      isShow: false //是否显示表情列表\n\n    };\n\n    this.handleSend = () => {\n      // 收集数据\n      const from = this.props.user._id;\n      const to = this.props.match.params.userid;\n      const content = this.state.content.trim(); // 发送请求(发消息)\n\n      if (content) {\n        // 异步操作\n        this.props.sendMsg({\n          from,\n          to,\n          content\n        });\n      } // 清除输入数据\n\n\n      this.setState({\n        content: \"\"\n      });\n    };\n\n    this.toggleShow = () => {\n      const isShow = !this.state.isShow;\n      this.setState({\n        isShow\n      }); // 这是为了解决表情列表显示时的bug\n\n      if (isShow) {\n        // 异步手动派发一个resize事件，解决表情列表显示的bug\n        setTimeout(() => {\n          window.dispatchEvent(new Event(\"resize\"));\n        }, 0);\n      }\n    };\n  }\n\n  componentWillMount() {\n    // 在第一次render之前调用，表示在打开对话框时已经加载到了表情文本\n    const emojis = [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\", \"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\", \"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\"]; // this.emojis是一个元素为对象的数组\n\n    this.emojis = emojis.map(emoji => ({\n      text: emoji\n    }));\n  }\n\n  componentDidMount() {\n    // 初始化显示列表，使滑动到与该用户收发的最新消息处\n    window.scrollTo(0, document.body.scrollHeight); // 发请求更新未读消息的数量\n\n    const from = this.props.match.params.userid;\n    const to = this.props.user._id;\n    this.props.readMsg(from, to);\n  }\n\n  componentWillUnmount() {\n    // 发请求更新未读消息的数量\n    const from = this.props.match.params.userid;\n    const to = this.props.user._id;\n    this.props.readMsg(from, to);\n  }\n\n  componentDidUpdate() {\n    // 更新显示列表\n    window.scrollTo(0, document.body.scrollHeight);\n  }\n\n  render() {\n    // debugger;\n    // console.log(\"我又render了一次.....\");\n    const {\n      user,\n      chat\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = chat; //当前chatMsgs中包含我和所有其他用户的聊天信息，我现在只需要显示我和某个特定用户的聊天信息\n    // 所以需要过滤\n    // 先得到当前的chat_id\n\n    const meId = user._id; // 刚开始users中是没有数据的，是一个空对象，需要发送异步请求获取消息列表的同时\n    // 获取到users\n\n    if (!users[meId]) {\n      console.log(\"我渲染了，但是我还没有得到redux中的状态值\");\n      return null;\n    } // debugger;\n\n\n    const targetId = this.props.match.params.userid;\n    const chat_id = [meId, targetId].sort().join(\"_\");\n    const msgs = chatMsgs.filter(msg => msg.chat_id === chat_id); // msgs中的消息有两种情况：我发的，对方发的\n\n    console.log(targetId); // 获取目标用户的头像\n\n    const targetHeader = users[targetId].header; // 有一个问题，对方可能还没有完善信息，并不具备icon\n\n    const targetIcon = targetHeader ? require(`../../assets/images/${targetHeader}.png`) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_NavBar, {\n      icon: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }),\n      onLeftClick: () => {\n        this.props.history.goBack();\n      },\n      className: \"sticky-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, users[targetId].username), /*#__PURE__*/React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(QueueAnim, {\n      type: \"alpha\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, msgs.map(msg => {\n      if (msg.to === meId) {\n        // 对方发给我的\n        return /*#__PURE__*/React.createElement(Item, {\n          key: msg._id,\n          thumb: targetIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 19\n          }\n        }, msg.content);\n      } else {\n        //我发给对方的\n        return /*#__PURE__*/React.createElement(Item, {\n          key: msg._id,\n          extra: \"\\u6211\",\n          className: \"chat-me\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 19\n          }\n        }, msg.content);\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"am-tab-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(_InputItem, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\",\n      extra: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        onClick: this.toggleShow,\n        style: {\n          marginRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, \"\\uD83D\\uDE03\"), /*#__PURE__*/React.createElement(\"span\", {\n        onClick: this.handleSend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }, \"\\u53D1\\u9001\")),\n      value: this.state.content,\n      onChange: val => this.setState({\n        content: val\n      }),\n      onFocus: () => this.setState({\n        isShow: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }), this.state.isShow ? /*#__PURE__*/React.createElement(_Grid, {\n      data: this.emojis,\n      columnNum: 8,\n      carouselMaxRow: 4,\n      isCarousel: true,\n      onClick: item => {\n        this.setState({\n          content: this.state.content + item.text\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }) : null));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {\n  sendMsg,\n  readMsg\n})(Chat);","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/containers/chat/chat.jsx"],"names":["React","connect","QueueAnim","sendMsg","readMsg","Item","Chat","Component","state","content","isShow","handleSend","from","props","user","_id","to","match","params","userid","trim","setState","toggleShow","setTimeout","window","dispatchEvent","Event","componentWillMount","emojis","map","emoji","text","componentDidMount","scrollTo","document","body","scrollHeight","componentWillUnmount","componentDidUpdate","render","chat","users","chatMsgs","meId","console","log","targetId","chat_id","sort","join","msgs","filter","msg","targetHeader","header","targetIcon","require","history","goBack","username","marginTop","marginBottom","marginRight","val","item"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavBar, List, InputItem, Grid, Icon } from \"antd-mobile\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\n\r\nimport { sendMsg, readMsg } from \"../../redux/actions\";\r\n\r\nconst Item = List.Item;\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    content: \"\",\r\n    isShow: false, //是否显示表情列表\r\n  };\r\n  componentWillMount() {\r\n    // 在第一次render之前调用，表示在打开对话框时已经加载到了表情文本\r\n    const emojis = [\r\n      \"😀\",\r\n      \"😃\",\r\n      \"😄\",\r\n      \"😁\",\r\n      \"😆\",\r\n      \"😅\",\r\n      \"🤣\",\r\n      \"😂\",\r\n      \"🙂\",\r\n      \"🙃\",\r\n      \"😀\",\r\n      \"😃\",\r\n      \"😄\",\r\n      \"😁\",\r\n      \"😆\",\r\n      \"😅\",\r\n      \"🤣\",\r\n      \"😂\",\r\n      \"🙂\",\r\n      \"🙃\",\r\n      \"😀\",\r\n      \"😃\",\r\n      \"😄\",\r\n      \"😁\",\r\n      \"😆\",\r\n      \"😅\",\r\n      \"🤣\",\r\n      \"😂\",\r\n      \"🙂\",\r\n      \"🙃\",\r\n    ];\r\n    // this.emojis是一个元素为对象的数组\r\n    this.emojis = emojis.map((emoji) => ({ text: emoji }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 初始化显示列表，使滑动到与该用户收发的最新消息处\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n\r\n    // 发请求更新未读消息的数量\r\n    const from = this.props.match.params.userid;\r\n    const to = this.props.user._id;\r\n    this.props.readMsg(from, to);\r\n  }\r\n  componentWillUnmount() {\r\n    // 发请求更新未读消息的数量\r\n    const from = this.props.match.params.userid;\r\n    const to = this.props.user._id;\r\n    this.props.readMsg(from, to);\r\n  }\r\n  componentDidUpdate() {\r\n    // 更新显示列表\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  }\r\n  handleSend = () => {\r\n    // 收集数据\r\n    const from = this.props.user._id;\r\n    const to = this.props.match.params.userid;\r\n    const content = this.state.content.trim();\r\n    // 发送请求(发消息)\r\n    if (content) {\r\n      // 异步操作\r\n      this.props.sendMsg({ from, to, content });\r\n    }\r\n    // 清除输入数据\r\n    this.setState({ content: \"\" });\r\n  };\r\n  toggleShow = () => {\r\n    const isShow = !this.state.isShow;\r\n    this.setState({ isShow });\r\n    // 这是为了解决表情列表显示时的bug\r\n    if (isShow) {\r\n      // 异步手动派发一个resize事件，解决表情列表显示的bug\r\n      setTimeout(() => {\r\n        window.dispatchEvent(new Event(\"resize\"));\r\n      }, 0);\r\n    }\r\n  };\r\n  render() {\r\n    // debugger;\r\n    // console.log(\"我又render了一次.....\");\r\n    const { user, chat } = this.props;\r\n    const { users, chatMsgs } = chat;\r\n    //当前chatMsgs中包含我和所有其他用户的聊天信息，我现在只需要显示我和某个特定用户的聊天信息\r\n    // 所以需要过滤\r\n    // 先得到当前的chat_id\r\n    const meId = user._id;\r\n\r\n    // 刚开始users中是没有数据的，是一个空对象，需要发送异步请求获取消息列表的同时\r\n    // 获取到users\r\n    if (!users[meId]) {\r\n      console.log(\"我渲染了，但是我还没有得到redux中的状态值\");\r\n      return null;\r\n    }\r\n\r\n    // debugger;\r\n    const targetId = this.props.match.params.userid;\r\n    const chat_id = [meId, targetId].sort().join(\"_\");\r\n\r\n    const msgs = chatMsgs.filter((msg) => msg.chat_id === chat_id);\r\n    // msgs中的消息有两种情况：我发的，对方发的\r\n\r\n    console.log(targetId);\r\n    // 获取目标用户的头像\r\n    const targetHeader = users[targetId].header;\r\n    // 有一个问题，对方可能还没有完善信息，并不具备icon\r\n    const targetIcon = targetHeader\r\n      ? require(`../../assets/images/${targetHeader}.png`)\r\n      : null;\r\n\r\n    return (\r\n      <div id=\"chat-page\">\r\n        <NavBar\r\n          icon={<Icon type=\"left\" />}\r\n          onLeftClick={() => {\r\n            this.props.history.goBack();\r\n          }}\r\n          className=\"sticky-header\"\r\n        >\r\n          {users[targetId].username}\r\n        </NavBar>\r\n        <List style={{ marginTop: 50, marginBottom: 50 }}>\r\n          <QueueAnim type=\"alpha\">\r\n            {msgs.map((msg) => {\r\n              if (msg.to === meId) {\r\n                // 对方发给我的\r\n                return (\r\n                  <Item key={msg._id} thumb={targetIcon}>\r\n                    {msg.content}\r\n                  </Item>\r\n                );\r\n              } else {\r\n                //我发给对方的\r\n                return (\r\n                  <Item key={msg._id} extra=\"我\" className=\"chat-me\">\r\n                    {msg.content}\r\n                  </Item>\r\n                );\r\n              }\r\n            })}\r\n          </QueueAnim>\r\n        </List>\r\n        <div className=\"am-tab-bar\">\r\n          <InputItem\r\n            placeholder=\"请输入\"\r\n            extra={\r\n              <span>\r\n                <span onClick={this.toggleShow} style={{ marginRight: 5 }}>\r\n                  😃\r\n                </span>\r\n                <span onClick={this.handleSend}>发送</span>\r\n              </span>\r\n            }\r\n            value={this.state.content}\r\n            onChange={(val) => this.setState({ content: val })}\r\n            onFocus={() => this.setState({ isShow: false })}\r\n          ></InputItem>\r\n          {this.state.isShow ? (\r\n            <Grid\r\n              data={this.emojis}\r\n              columnNum={8}\r\n              carouselMaxRow={4}\r\n              isCarousel={true}\r\n              onClick={(item) => {\r\n                this.setState({ content: this.state.content + item.text });\r\n              }}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({ user: state.user, chat: state.chat }), {\r\n  sendMsg,\r\n  readMsg,\r\n})(Chat);\r\n"]},"metadata":{},"sourceType":"module"}