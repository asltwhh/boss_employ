{"ast":null,"code":"import \"antd-mobile/es/tab-bar/style\";\nimport _TabBar from \"antd-mobile/es/tab-bar\";\nvar _jsxFileName = \"E:\\\\mycode\\\\boss_employ\\\\gzhipin-client1.0\\\\src\\\\components\\\\nav-footer\\\\nav-footer.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nconst Item = _TabBar.Item;\n\nclass NavFooter extends React.Component {\n  render() {\n    //   需要显示的导航项\n    let {\n      navList\n    } = this.props; // 过滤掉hide为true的nav\n\n    navList = navList.filter(nav => !nav.hide); // 获取当前请求的路径\n\n    const path = this.props.location.pathname;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_TabBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, navList.map(nav => /*#__PURE__*/React.createElement(Item, {\n      key: nav.path,\n      extra: /*#__PURE__*/React.createElement(Badge, {\n        text: msg.unReadCount,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 22\n        }\n      }) // 未读消息数量\n      ,\n      title: nav.text,\n      icon: {\n        uri: require(`./images/${nav.icon}.png`)\n      },\n      selectedIcon: {\n        uri: require(`./images/${nav.icon}-selected.png`)\n      },\n      selected: path === nav.path,\n      onPress: () => this.props.history.replace(nav.path),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n} // 使用withRouter包装产生的组件可以使用路由组件的API，原来的组件NavFooter属于非路由组件\n// 非路由组件不能访问路由组件的API\n// 被withRouter包装的组件会自动传入history,location,match等路由组件的API\n\n\nNavFooter.propTypes = {\n  navList: PropTypes.array.isRequired\n};\nexport default withRouter(NavFooter);","map":{"version":3,"sources":["E:/mycode/boss_employ/gzhipin-client1.0/src/components/nav-footer/nav-footer.jsx"],"names":["React","PropTypes","withRouter","Item","NavFooter","Component","render","navList","props","filter","nav","hide","path","location","pathname","map","msg","unReadCount","text","uri","require","icon","history","replace","propTypes","array","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,IAAI,GAAG,QAAOA,IAApB;;AACA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAKtCC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAvB,CAFO,CAGP;;AACAD,IAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAgBC,GAAD,IAAS,CAACA,GAAG,CAACC,IAA7B,CAAV,CAJO,CAKP;;AACA,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,QAAjC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,OAAO,CAACQ,GAAR,CAAaL,GAAD,iBACX,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,GAAG,CAACE,IADX;AAEE,MAAA,KAAK,eAAE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAEI,GAAG,CAACC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFT,CAE2C;AAF3C;AAGE,MAAA,KAAK,EAAEP,GAAG,CAACQ,IAHb;AAIE,MAAA,IAAI,EAAE;AAAEC,QAAAA,GAAG,EAAEC,OAAO,CAAE,YAAWV,GAAG,CAACW,IAAK,MAAtB;AAAd,OAJR;AAKE,MAAA,YAAY,EAAE;AACZF,QAAAA,GAAG,EAAEC,OAAO,CAAE,YAAWV,GAAG,CAACW,IAAK,eAAtB;AADA,OALhB;AAQE,MAAA,QAAQ,EAAET,IAAI,KAAKF,GAAG,CAACE,IARzB;AASE,MAAA,OAAO,EAAE,MAAM,KAAKJ,KAAL,CAAWc,OAAX,CAAmBC,OAAnB,CAA2Bb,GAAG,CAACE,IAA/B,CATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF,CADF;AAmBD;;AA/BqC,C,CAkCxC;AACA;AACA;;;AApCMR,S,CACGoB,S,GAAY;AACjBjB,EAAAA,OAAO,EAAEN,SAAS,CAACwB,KAAV,CAAgBC;AADR,C;AAoCrB,eAAexB,UAAU,CAACE,SAAD,CAAzB","sourcesContent":["import React from \"react\";\r\nimport { TabBar } from \"antd-mobile\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst Item = TabBar.Item;\r\nclass NavFooter extends React.Component {\r\n  static propTypes = {\r\n    navList: PropTypes.array.isRequired,\r\n  };\r\n\r\n  render() {\r\n    //   需要显示的导航项\r\n    let { navList } = this.props;\r\n    // 过滤掉hide为true的nav\r\n    navList = navList.filter((nav) => !nav.hide);\r\n    // 获取当前请求的路径\r\n    const path = this.props.location.pathname;\r\n    return (\r\n      <div>\r\n        <TabBar>\r\n          {navList.map((nav) => (\r\n            <Item\r\n              key={nav.path}\r\n              extra={<Badge text={msg.unReadCount} />} // 未读消息数量\r\n              title={nav.text}\r\n              icon={{ uri: require(`./images/${nav.icon}.png`) }}\r\n              selectedIcon={{\r\n                uri: require(`./images/${nav.icon}-selected.png`),\r\n              }}\r\n              selected={path === nav.path}\r\n              onPress={() => this.props.history.replace(nav.path)}\r\n            ></Item>\r\n          ))}\r\n        </TabBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 使用withRouter包装产生的组件可以使用路由组件的API，原来的组件NavFooter属于非路由组件\r\n// 非路由组件不能访问路由组件的API\r\n// 被withRouter包装的组件会自动传入history,location,match等路由组件的API\r\nexport default withRouter(NavFooter);\r\n"]},"metadata":{},"sourceType":"module"}