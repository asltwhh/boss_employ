{"ast":null,"code":"/* tslint:disable:no-bitwise */\nimport { SWIPE, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN } from './config';\n\nfunction _calcTriangleDistance(x, y) {\n  return Math.sqrt(x * x + y * y);\n}\n\nfunction _calcAngle(x, y) {\n  var radian = Math.atan2(y, x);\n  return 180 / (Math.PI / radian);\n}\n\nexport function now() {\n  return Date.now();\n}\nexport function calcMutliFingerStatus(touches) {\n  if (touches.length < 2) {\n    return;\n  }\n\n  var _touches$ = touches[0],\n      x1 = _touches$.x,\n      y1 = _touches$.y;\n  var _touches$2 = touches[1],\n      x2 = _touches$2.x,\n      y2 = _touches$2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: _calcTriangleDistance(deltaX, deltaY),\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcMoveStatus(startTouches, touches, time) {\n  var _startTouches$ = startTouches[0],\n      x1 = _startTouches$.x,\n      y1 = _startTouches$.y;\n  var _touches$3 = touches[0],\n      x2 = _touches$3.x,\n      y2 = _touches$3.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  var deltaZ = _calcTriangleDistance(deltaX, deltaY);\n\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: deltaZ,\n    time: time,\n    velocity: deltaZ / time,\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcRotation(startMutliFingerStatus, mutliFingerStatus) {\n  var startAngle = startMutliFingerStatus.angle;\n  var angle = mutliFingerStatus.angle;\n  return angle - startAngle;\n}\nexport function getEventName(prefix, status) {\n  return prefix + status[0].toUpperCase() + status.slice(1);\n}\nexport function shouldTriggerSwipe(delta, velocity) {\n  return Math.abs(delta) >= SWIPE.threshold && Math.abs(velocity) > SWIPE.velocity;\n}\nexport function shouldTriggerDirection(direction, directionSetting) {\n  if (directionSetting & direction) {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * @private\r\n * get the direction between two points\r\n * Note: will change next version\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\n\nexport function getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(x) >= Math.abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n/**\r\n * @private\r\n * get the direction between tow points when touch moving\r\n * Note: will change next version\r\n * @param {Object} point1 coordinate point, include x & y attributes\r\n * @param {Object} point2 coordinate point, include x & y attributes\r\n * @return {Number} direction\r\n */\n\nexport function getMovingDirection(point1, point2) {\n  var x1 = point1.x,\n      y1 = point1.y;\n  var x2 = point2.x,\n      y2 = point2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  if (deltaX === 0 && deltaY === 0) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n    return deltaX < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return deltaY < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\nexport function getDirectionEventName(direction) {\n  var name = void 0;\n\n  switch (direction) {\n    case DIRECTION_NONE:\n      break;\n\n    case DIRECTION_LEFT:\n      name = 'left';\n      break;\n\n    case DIRECTION_RIGHT:\n      name = 'right';\n      break;\n\n    case DIRECTION_UP:\n      name = 'up';\n      break;\n\n    case DIRECTION_DOWN:\n      name = 'down';\n      break;\n\n    default:\n  }\n\n  return name;\n}","map":{"version":3,"sources":["E:/workspaces/github/Boss_React/gzhipin-client1.0/node_modules/rc-gesture/es/util.js"],"names":["SWIPE","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","_calcTriangleDistance","x","y","Math","sqrt","_calcAngle","radian","atan2","PI","now","Date","calcMutliFingerStatus","touches","length","_touches$","x1","y1","_touches$2","x2","y2","deltaX","deltaY","z","angle","calcMoveStatus","startTouches","time","_startTouches$","_touches$3","deltaZ","velocity","calcRotation","startMutliFingerStatus","mutliFingerStatus","startAngle","getEventName","prefix","status","toUpperCase","slice","shouldTriggerSwipe","delta","abs","threshold","shouldTriggerDirection","direction","directionSetting","getDirection","getMovingDirection","point1","point2","getDirectionEventName","name"],"mappings":"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","sourcesContent":["/* tslint:disable:no-bitwise */\r\nimport { SWIPE, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN } from './config';\r\nfunction _calcTriangleDistance(x, y) {\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\nfunction _calcAngle(x, y) {\r\n    var radian = Math.atan2(y, x);\r\n    return 180 / (Math.PI / radian);\r\n}\r\nexport function now() {\r\n    return Date.now();\r\n}\r\nexport function calcMutliFingerStatus(touches) {\r\n    if (touches.length < 2) {\r\n        return;\r\n    }\r\n    var _touches$ = touches[0],\r\n        x1 = _touches$.x,\r\n        y1 = _touches$.y;\r\n    var _touches$2 = touches[1],\r\n        x2 = _touches$2.x,\r\n        y2 = _touches$2.y;\r\n\r\n    var deltaX = x2 - x1;\r\n    var deltaY = y2 - y1;\r\n    return {\r\n        x: deltaX,\r\n        y: deltaY,\r\n        z: _calcTriangleDistance(deltaX, deltaY),\r\n        angle: _calcAngle(deltaX, deltaY)\r\n    };\r\n}\r\nexport function calcMoveStatus(startTouches, touches, time) {\r\n    var _startTouches$ = startTouches[0],\r\n        x1 = _startTouches$.x,\r\n        y1 = _startTouches$.y;\r\n    var _touches$3 = touches[0],\r\n        x2 = _touches$3.x,\r\n        y2 = _touches$3.y;\r\n\r\n    var deltaX = x2 - x1;\r\n    var deltaY = y2 - y1;\r\n    var deltaZ = _calcTriangleDistance(deltaX, deltaY);\r\n    return {\r\n        x: deltaX,\r\n        y: deltaY,\r\n        z: deltaZ,\r\n        time: time,\r\n        velocity: deltaZ / time,\r\n        angle: _calcAngle(deltaX, deltaY)\r\n    };\r\n}\r\nexport function calcRotation(startMutliFingerStatus, mutliFingerStatus) {\r\n    var startAngle = startMutliFingerStatus.angle;\r\n    var angle = mutliFingerStatus.angle;\r\n\r\n    return angle - startAngle;\r\n}\r\nexport function getEventName(prefix, status) {\r\n    return prefix + status[0].toUpperCase() + status.slice(1);\r\n}\r\nexport function shouldTriggerSwipe(delta, velocity) {\r\n    return Math.abs(delta) >= SWIPE.threshold && Math.abs(velocity) > SWIPE.velocity;\r\n}\r\nexport function shouldTriggerDirection(direction, directionSetting) {\r\n    if (directionSetting & direction) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @private\r\n * get the direction between two points\r\n * Note: will change next version\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nexport function getDirection(x, y) {\r\n    if (x === y) {\r\n        return DIRECTION_NONE;\r\n    }\r\n    if (Math.abs(x) >= Math.abs(y)) {\r\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n/**\r\n * @private\r\n * get the direction between tow points when touch moving\r\n * Note: will change next version\r\n * @param {Object} point1 coordinate point, include x & y attributes\r\n * @param {Object} point2 coordinate point, include x & y attributes\r\n * @return {Number} direction\r\n */\r\nexport function getMovingDirection(point1, point2) {\r\n    var x1 = point1.x,\r\n        y1 = point1.y;\r\n    var x2 = point2.x,\r\n        y2 = point2.y;\r\n\r\n    var deltaX = x2 - x1;\r\n    var deltaY = y2 - y1;\r\n    if (deltaX === 0 && deltaY === 0) {\r\n        return DIRECTION_NONE;\r\n    }\r\n    if (Math.abs(deltaX) >= Math.abs(deltaY)) {\r\n        return deltaX < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return deltaY < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\nexport function getDirectionEventName(direction) {\r\n    var name = void 0;\r\n    switch (direction) {\r\n        case DIRECTION_NONE:\r\n            break;\r\n        case DIRECTION_LEFT:\r\n            name = 'left';\r\n            break;\r\n        case DIRECTION_RIGHT:\r\n            name = 'right';\r\n            break;\r\n        case DIRECTION_UP:\r\n            name = 'up';\r\n            break;\r\n        case DIRECTION_DOWN:\r\n            name = 'down';\r\n            break;\r\n        default:\r\n    }\r\n    return name;\r\n}"]},"metadata":{},"sourceType":"module"}